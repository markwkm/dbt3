#!/bin/bash
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2003-2006 Open Source Development Labs, Inc.
#               2003-2006 Jenny Zhang
#               2015-2017 2ndQuadrant, Ltd.
#               2004-2022 Mark Wong
#

MPP=0
NO_REFRESH=0
NO_REFRESH_FLAG=
PRIVILEGED=1
TEST_ARGS=
USE_OPROFILE=0
USE_LINUXPERF=0

usage()
{
	echo
	echo "`basename $0` is the DBT-3 throughput runner"
	echo ""
	echo "Usage:"
	echo "  `basename $0` [OPTIONS]"
	echo
	echo "Generate options:"
	echo "  -a DBMS         database management system to test"
	echo "  -f SCALE        database scale factor, default 1"
	echo "  -h              this help message"
	echo "  -n STREAMS      number of throughput streams"
	echo "  -o DIRECTORY    path to store test results"
	echo "  -s SEED         seed to use for power and throughput tests"
	echo "  -u              use tablespaces"
	echo "  -U              run test as an unprivileged user"
	echo "  -y              enable oprofile (Linux only)"
	echo "  -Y              enable linux perf (Linux only)"
	echo "  -z              do not run refresh streams"
	echo ""
	echo "DBMS options are:"
	echo "  monetdb         MonetDB"
	echo "  mysql           MySQL"
	echo "  pgsql           PostgreSQL"
	echo "  pgxl            Postgres-XL"
	echo "  virtuoso        Virtuoso"
	echo ""
	echo "PostgreSQL specific options:"
	echo "  -e              EXPLAIN ANALYZE"
	echo "  -p              database parameters for the load test"
}

while getopts "a:ef:hn:o:p:s:UyYz" opt; do
	case $opt in
	a) DATABASE=$OPTARG
		if [ "x$DATABASE" = "xpgxl" ]; then
			MPP=1
		fi
		;;
	e) TEST_ARGS="$TEST_ARGS -e"
		;;
	f) scale_factor=$OPTARG
		;;
	h) usage
		exit 0
		;;
	n) num_stream=$OPTARG
		;;
	o) OUTPUT_DIR=$OPTARG
		mkdir -p $OUTPUT_DIR/results
		;;
	p)
		PARAMETERS_ARG="-p \"$OPTARG\""
		;;
	s) SEED_FILE=$OPTARG
		;;
	U) PRIVILEGED=0
		;;
	y) USE_OPROFILE=1
		;;
	Y) USE_LINUXPERF=1
		LINUXPERF_FLAG="-Y"
		;;
	z) NO_REFRESH_FLAG="-z"
		NO_REFRESH=1
		;;
	\?) exit 1
		;;
	esac
done

if [ "x$DATABASE" = "x" ]; then
	echo "Specify database management system with -a flag"
	exit 1
fi

if [ "x$DATABASE" = "xpgxl" ]; then
	TAG="pgsql"
	. $HOME/pgxc_ctl/pgxc_ctl.conf
	for HOSTNAME in ${datanodeMasterServers=[$i]}; do
		ssh $HOSTNAME "mkdir -p $OUTPUT_DIR/results"
	done
else
	TAG=$DATABASE
fi

which gzip > /dev/null 2>&1
if [ $? -eq 0 ]; then
	GZIP=gzip
else
	GZIP=true
fi

read SEED < $SEED_FILE
echo "Seed : $SEED" > $OUTPUT_DIR/readme.txt

RUNDIR=$OUTPUT_DIR/run
mkdir -p $RUNDIR

# Clear the read profile counters.
if [ -f /proc/profile ]; then
	clearprof
fi

# Clear the oprofile counters.
if [ $USE_OPROFILE -eq 1 ]; then
	clearoprof
fi

if [ $MPP -eq 0 ] && [ $USE_LINUXPERF -eq 1 ]; then
	PERFDIR=$OUTPUT_DIR/perf
	mkdir -p $PERFDIR
	PERFCOMMAND="perf record -a -g -s -F 100 -o $PERFDIR/perf.data"
fi

if [ $PRIVILEGED -eq 1 ]; then
	dbt3-$DATABASE-stop-db
	eval dbt3-$DATABASE-start-db -o $OUTPUT_DIR $PARAMETERS_ARG || exit 1
fi

dbt3-$TAG-time-statistics -s -n PERF.THRUPUT || exit 1

# Start collecting system statistics. 
dbt3-sysstats --outdir $OUTPUT_DIR --sample 60 || exit 1

# Start collecting database statistics.
dbt3-$DATABASE-dbstat ${OUTPUT_DIR} &

# Start the streams.
eval $PERFCOMMAND dbt3-throughput-stream-wrapper -f $scale_factor \
		-n $num_stream $TEST_ARGS -o $OUTPUT_DIR -s $SEED_FILE \
		$NO_REFRESH_FLAG $LINUXPERF_FLAG || exit 1

# Stop collecting system statistics.
read SARPIDS < $OUTPUT_DIR/sar.pid
for SARPID in $SARPIDS; do
	kill $SARPID
done
read PIDSTATPIDS < $OUTPUT_DIR/pidstat.pid
for PIDSTATPID in $PIDSTATPIDS; do
	kill $PIDSTATPID
done
if [ -f "$OUTPUT_DIR/dbstat.pid" ]; then
	read DBSTATPID < $OUTPUT_DIR/dbstat.pid
	kill $DBSTATPID
fi

dbt3-$TAG-time-statistics -e -n PERF.THRUPUT || exit 1

# Stop the database after the test.
if [ $PRIVILEGED -eq 1 ]; then
	dbt3-$DATABASE-stop-db
fi

if [ -f /proc/profile ]; then
	profname="Throughput_Test"
	getprof
fi

if [ $USE_OPROFILE -eq 1 ]; then
	profname="Throughput_Test"
	getoprof
fi

if [ $MPP -eq 0 ] && [ $USE_LINUXPERF -eq 1 ]; then
	echo "Generating Linux perf reports for throughput test..."
	perf report -i $PERFDIR/perf.data -n > $PERFDIR/perf-report.txt \
			2>> $OUTPUT_DIR/perf/report-output.txt
	$GZIP $PERFDIR/perf-report.txt
	perf annotate -l -P -i $PERFDIR/perf.data > $PERFDIR/perf-annotate.txt \
			2>> $OUTPUT_DIR/perf/report-output.txt
	$GZIP $PERFDIR/perf-annotate.txt
	perf script -L -i $PERFDIR/perf.data > $PERFDIR/perf-trace.txt \
			2>> $OUTPUT_DIR/perf/report-output.txt
	$GZIP $PERFDIR/perf-trace.txt
	$GZIP $PERFDIR/perf.data

	i=1
	while [ $i -le $num_stream ]; do
		j=1
		while [ $j -le 22 ]; do
			PERFDIR=$OUTPUT_DIR/results/$i/perf/$j
			PERFPREFIX=q$j
			perf report -i $PERFDIR/$PERFPREFIX-perf.data -n \
					> $PERFDIR/$PERFPREFIX-perf-report.txt
			$GZIP $PERFDIR/$PERFPREFIX-perf-report.txt
			perf annotate -l -P -i $PERFDIR/$PERFPREFIX-perf.data \
					> $PERFDIR/$PERFPREFIX-perf-annotate.txt
			$GZIP $PERFDIR/$PERFPREFIX-perf-annotate.txt
			perf script -L -i $PERFDIR/$PERFPREFIX-perf.data \
					> $PERFDIR/$PERFPREFIX-perf-trace.txt
			$GZIP $PERFDIR/$PERFPREFIX-perf-trace.txt
			$GZIP $PERFDIR/$PERFPREFIX-perf.data
			j=$(( $j + 1 ))
		done
		i=$(( $i + 1 ))
	done > $OUTPUT_DIR/perf/perf-output.txt 2>&1
	wait
fi
