#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see # the file LICENSE, included in this package, for details.
#
# Copyright The DBT-3 Authors

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 3 (DBT-3) throughput stream wrapper

Usage:
  $(basename "${0}") [OPTION]

Options:
  -a DBMS        database management system to test
  -f SCALE       database scale factor, default 1
  -n STREAMS     number of throughput STREAMS
  -o DIRECTORY   DIRECTORY to store test results
  -s SEED        set SEED to a specific value
  -U             run test as an unprivileged user
  -Y             enable profiling (Linux only)
  -V, --version  output version information, then exit
  -z             do not run refresh streams
  -?, --help     show this help, then exit

DBMS options are:
  monetdb    MonetDB
  mysql      MySQL
  pgsql      PostgreSQL
  pgxl       Postgres-XL
  virtuoso   Virtuoso

MySQL specific options:
  --mysql-socket=FILE
                  specify socket FILE

PostgreSQL specific options:
  -e             EXPLAIN ANALYZE

@HOMEPAGE@
EOF
}

DBMS_ARGS=""
NO_REFRESH=0

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ]; do
	case "${1}" in
	(-a)
		shift
		DATABASE="${1}"
		;;
	(-e)
		EXTRA_ARGS="$EXTRA_ARGS -e"
		;;
	(-f)
		shift
		scale_factor="${1}"
		;;
	(--mysql-socket)
		shift
		DBMS_ARGS="${DBMS_ARGS} --mysql-socket=${1}"
		;;
	(--mysql-socket=?*)
		DBMS_ARGS="${DBMS_ARGS} --mysql-socket=${1#*--mysql-socket=}"
		;;
	(-n)
		shift
		num_stream="${1}"
		;;
	(-o)
		shift
		OUTPUT_DIR="${1}"
		;;
	(-s)
		shift
		SEED_FILE="${1}"
		;;
	(-U)
		UNPRIVILEGED_ARG="-U"
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 3) v@PROJECT_VERSION@"
		;;
	(-z)
		NO_REFRESH=1
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ "x$DATABASE" = "x" ]; then
	echo "Specify database management system with -a flag"
	exit 1
fi

if [ "x$DATABASE" = "xpgxl" ]; then
	TAG="pgsql"
else
	TAG=$DATABASE
fi

RUNDIR=$OUTPUT_DIR/run

# Start each stream.
i=1
while [ $i -le $num_stream ] 
do
	eval "dbt3-throughput-stream \
			-f ${scale_factor} \
			-t ${i} \
			$EXTRA_ARGS \
			-o ${OUTPUT_DIR} \
			-s ${SEED_FILE} \
			${DBMS_ARGS} > ${RUNDIR}/thruput_qs${i} 2>&1 &"
	
	i=$(( $i + 1 ))
done

stream_num=1
while [ $stream_num -le $num_stream ]; do
	STREAM="PERF.THRUPUT.RFST$stream_num"
	RF1TASK="PERF.THRUPUT.RFST$stream_num.RF1"
	RF2TASK="PERF.THRUPUT.RFST$stream_num.RF2"
	RF1OUT="$OUTPUT_DIR/results/$stream_num/rf1.txt"
	RF2OUT="$OUTPUT_DIR/results/$stream_num/rf2.txt"

	# Directories may not be created before the query is executed.
	mkdir -p $OUTPUT_DIR/results/$stream_num

	eval "dbt3-${TAG}-time-statistics -s -n ${STREAM} ${DBMS_ARGS}" || exit 1

	eval "dbt3-${TAG}-time-statistics -s -n ${RF1TASK} ${DBMS_ARGS}" || exit 1
	if [ $NO_REFRESH -eq 0 ]; then
		echo "`date`: Throughput Stream $stream_num: Starting RF 1..."
		s_time_rf1=`date +%s`
		eval "dbt3-${TAG}-rf1 ${UNPRIVILEGED_ARG} ${EXTRA_ARGS} ${DBMS_ARGS} \
				-f ${scale_factor} > ${RF1OUT} 2>&1"
		DATASET=$?
		if [ $DATASET -lt 1 ]; then
			exit 1
		fi
		e_time_rf1=`date +%s`
		diff_time_rf1=$(( $e_time_rf1 - $s_time_rf1 ))
		echo "Throughput Stream $stream_num: Elapsed time for Refresh Stream 1: $diff_time_rf1 seconds"
	fi
	eval "dbt3-${TAG}-time-statistics -e -n ${RF1TASK} ${DBMS_ARGS}" || exit 1

	echo "`date`: Throughput Stream $stream_num: Starting RF 2..."
	s_time_rf2=`date +%s`
	eval "dbt3-${TAG}-time-statistics -s -n ${RF2TASK} ${DBMS_ARGS}" || exit 1
	if [ $NO_REFRESH -eq 0 ]; then
		eval "dbt3-${TAG}-rf2 ${UNPRIVILEGED_ARG} ${EXTRA_ARGS} ${DBMS_ARGS} \
				-s ${DATASET} > ${RF2OUT} 2>&1" || exit 1
		e_time_rf2=`date +%s`
		diff_time_rf2=$(( $e_time_rf2 - $s_time_rf2 ))
		echo "Throughput Steam $stream_num: Elapsed time for RF 2: $diff_time_rf2 seconds"
	fi
	eval "dbt3-${TAG}-time-statistics -e -n ${RF2TASK} ${DBMS_ARGS}" || exit 1

	eval "dbt3-${TAG}-time-statistics -e -n ${STREAM} ${DBMS_ARGS}" || exit 1

	stream_num=$(( $stream_num + 1 ))
done

wait
