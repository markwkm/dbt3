#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-3 Authors

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 3 (DBT-3) throughput test stream executor

Usage:
  $(basename "${0}") [OPTION]

Options:
  -a DBMS        database management system to test
  -f SCALE       database scale factor, default 1
  -n STREAMS     number of throughput STREAMS
  -o DIRECTORY   DIRECTORY to store test results
  -s SEED        set SEED to a specific value
  -t STREAM      set STREAM identifier
  -V, --version  output version information, then exit
  -?, --help     show this help, then exit

DBMS options are:
  monetdb    MonetDB
  mysql      MySQL
  pgsql      PostgreSQL
  pgxl       Postgres-XL
  virtuoso   Virtuoso

MySQL specific options:
  --mysql-socket=FILE
                  specify socket FILE

PostgreSQL specific options:
  -e             EXPLAIN ANALYZE

@HOMEPAGE@
EOF
}

DBMS_ARGS=""
MYSQL_ARGS=""

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ]; do
	case "${1}" in
	(-a)
		shift
		DATABASE="${1}"
		;;
	(-e)
		EXTRA_ARGS="-i \"${DSS_QUERY}/explain-analyze.sql\""
		;;
	(-f)
		shift
		SCALE_FACTOR="${1}"
		;;
	(--mysql-socket)
		shift
		DBMS_ARGS="${DBMS_ARGS} --mysql-socket=${1}"
		MYSQL_ARGS="${MYSQL_ARGS} --socket=${1}"
		;;
	(--mysql-socket=?*)
		DBMS_ARGS="${DBMS_ARGS} --mysql-socket=${1#*--mysql-socket=}"
		MYSQL_ARGS="${MYSQL_ARGS} --socket=${1#*--mysql-socket=}"
		;;
	(-n)
		shift
		num_stream="${1}"
		;;
	(-o)
		shift
		OUTPUT_DIR="${1}"
		mkdir -p $OUTPUT_DIR/results
		;;
	(-s)
		shift
		SEED_FILE="${1}"
		;;
	(-t)
		shift
		stream_num="${1}"
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 3) v@PROJECT_VERSION@"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ "x$DATABASE" = "x" ]; then
	echo "Specify database management system with -a flag"
	usage
	exit 1
fi

if [ "x$DATABASE" = "xpgxl" ]; then
	TAG="pgsql"
else
	TAG=$DATABASE
fi

if [ $DATABASE = "monetdb" ]; then
	DBCMD="mclient -e -d $DBNAME"
elif [ $DATABASE = "pgsql" ] || [ $DATABASE = "pgxl" ]; then
	DBCMD="psql -v ON_ERROR_STOP=1 -X -e"
elif [ $DATABASE = "mysql" ]; then
	DBCMD="mysql -u root -D ${DBNAME} ${MYSQL_ARGS}"
elif [ $DATABASE = "virtuoso" ]; then
	DBCMD="isql PROMPT=OFF ERRORS=STDOUT ECHO=ON VERBOSE=OFF"
else
	echo "Unsupported database system"
	exit 1
fi

RUNDIR=$OUTPUT_DIR/run
RESULTSDIR="${OUTPUT_DIR}/results/${stream_num}"
mkdir -p ${RESULTSDIR} || exit 1

# output PID to a tmp file
echo "$$" > $RUNDIR/PID$stream_num

if [ ! -f $SEED_FILE ]; then
	echo "creating seed file $SEED_FILE, you can change the seed by "
	echo "modifying this file"
	$SRCDIR/scripts/init_seed.sh > $SEED_FILE
fi
read SEED < $SEED_FILE
SEED=$(( ${SEED} + ${stream_num} ))

# get the execution plan for each query of each query stream
PLANDIR=${OUTPUT_DIR}/plans/${stream_num}
mkdir -p ${PLANDIR} || exit 1

if [ $DATABASE = "virtuoso" ]; then
	# Special case for Virtuoso since qgen cannot do this for us.
	ESTART="explain('"
	EEND="');"
fi
i=1
while [ $i -le 22 ]
do
	# Remember the query planned is in the order determined by the seed.
	Q=$(eval "\"${QGEN}\" -c -r ${SEED} -p ${stream_num} -s ${SCALE_FACTOR} -x ${i}")
	N=`echo ${Q} | sed -n -r 's/.*\(#\)([[:digit:]]+)\..*/\1/p'`
	if [ $DATABASE = "virtuoso" ]; then
		# Can't have comments or transaction statments sent to explain().
		# Escape single quotes for explain().
		Q=$(eval "\"$QGEN\" -a -r ${SEED} -p ${num_stream} -s ${SCALE_FACTOR} \
				-x ${i} | tail -n +2 | sed -e \"s/'/''/g\"")
	fi
	eval "${DBCMD}" << __EOF__ > "${PLANDIR}/${N}.txt" 2>&1
$ESTART
${Q}
$EEND
__EOF__
	i=$(( $i + 1 ))
done

# run the queries
echo "`date`: start throughput queriy stream $stream_num "
s_time=`date +%s`
STREAMTASK="PERF.THRUPUT.QS${stream_num}.ALL"
eval "dbt3-${TAG}-time-statistics -s -n ${STREAMTASK} ${DBMS_ARGS}" || exit 1
i=1
while [ ${i} -le 22 ]; do
	Q=$(eval "\"${QGEN}\" -c -r ${SEED} -p ${stream_num} -s ${SCALE_FACTOR} \
			${EXTRA_ARGS} ${i}")
	N=`echo ${Q} | sed -n -r 's/.*\(#\)([[:digit:]]+)\..*/\1/p'`
	TASK="PERF.THRUPUT.QS${stream_num}.Q${N}"
	eval "dbt3-${TAG}-time-statistics -s -n ${TASK} ${DBMS_ARGS}" || exit 1
	eval "${PERFCOMMAND} ${DBCMD}" << __EOF__ > "${RESULTSDIR}/${N}.txt" 2>&1
$Q
__EOF__
	eval "dbt3-${TAG}-time-statistics -e -n ${TASK} ${DBMS_ARGS}" || exit 1
	i=$(( ${i} + 1 ))
done
eval "dbt3-${TAG}-time-statistics -e -n ${STREAMTASK} ${DBMS_ARGS}" || exit 1
