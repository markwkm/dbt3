#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-3 Authors

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 3 (DBT-3) post processor

Usage:
  $(basename "${0}") [OPTION]

Options:
  -h             generate RST for HTML conversion
  -i DIRECTORY   DBT-3 results directory
  -n STREAMS     number of throughput STREAMS
  -V, --version  output version information, then exit
  -?, --help     show this help, then exit

@HOMEPAGE@
EOF
}

power_query_times() {
	if [ ! -d "${INDIR}/power" ]; then
		printf "=======  =========================%s\n" "$(if [ $HTML -eq 1 ]; then printf "  =="; fi)"
		return
	fi

	for Q in $(seq 1 22); do
		printf "%7d %26.2f" "${Q}" \
				"$(grep "^PERF\.POWER\.Q${Q}," "${QTIME}" | cut -d "," -f 5)"
		if [ $HTML -eq 1 ]; then
			printf "  \`Plan <power/plans/%d.txt>\`__ | " "${Q}"
			printf "\`Result <power/results/%d.txt>\`__" "${Q}"
		fi
		echo
	done
	for RF in $(seq 1 2); do
		printf "%7s %26.2f" "RF${RF}" \
				"$(grep "^PERF\.POWER\.RF${RF}," "${QTIME}" | cut -d "," -f 5)"
		if [ $HTML -eq 1 ]; then
			printf "  \`Result <power/results/rf%d.txt>\`__" "${RF}"
		fi
		echo
	done

	printf "=======  =========================%s\n" "$(if [ $HTML -eq 1 ]; then printf "  =="; fi)"
}

power_summary() {
	if [ ! -d "${INDIR}/power" ]; then
		echo "+--------------------+------------------------+------------------------+------------------------+"
		return
	fi

	printf "|%19.2f | %.22s | %.22s | %.22s |\n" \
			"$(grep "^PERF\.POWER," "${QTIME}" | cut -d "," -f 5)" \
			"$(grep "^PERF\.POWER\.Q" "${QTIME}" | cut -d "," -f 2 | head -n 1)" \
			"$(grep "^PERF\.POWER\.RF1" "${QTIME}" | cut -d "," -f 2)" \
			"$(grep "^PERF\.POWER\.RF2" "${QTIME}" | cut -d "," -f 2)"
	echo "|                    +------------------------+------------------------+------------------------+"
	printf "|                    | %.22s | %.22s | %.22s |\n" \
			"$(grep "^PERF\.POWER\.Q" "${QTIME}" | cut -d "," -f 3 | tail -n 1)" \
			"$(grep "^PERF\.POWER\.RF1" "${QTIME}" | cut -d "," -f 3)" \
			"$(grep "^PERF\.POWER\.RF2" "${QTIME}" | cut -d "," -f 3)"
	echo "+--------------------+------------------------+------------------------+------------------------+"
}

throughput_query() {
	if [ ! -d "${INDIR}/throughput" ]; then
		return
	fi

	Q0=${1}
	Q1=${2}

	if [ "${Q1}" -eq 22 ]; then
		Q1=24
	fi

	QSEGMENT="========"
	QEXTRASEGMENT="========================================================================"

	# Construct the table header based on whether it's for HTML or not.

	printf "%s" "${QSEGMENT}"
	for Q in $(seq "${Q0}" "${Q1}"); do
		printf "  %s" "${QSEGMENT}"
		if [ $HTML -eq 1 ]; then
			printf "%s" "${QEXTRASEGMENT}"
		fi
	done
	echo

	printf " Stream "
	for Q in $(seq "${Q0}" "${Q1}"); do
		if [ $HTML -eq 1 ]; then
			SIZE=75
		else
			SIZE=3
		fi
		if [ "${Q}" -eq 23 ]; then
			STRING="RF1"
		elif [ "${Q}" -eq 24 ]; then
			STRING="RF2"
		else
			STRING="Q${Q}"
		fi
		printf "     %-${SIZE}s  " "${STRING}"
	done
	echo

	printf "%s" "${QSEGMENT}"
	for Q in $(seq "${Q0}" "${Q1}"); do
		printf "  %s" "${QSEGMENT}"
		if [ $HTML -eq 1 ]; then
			printf "%s" "${QEXTRASEGMENT}"
		fi
	done
	echo

	# Fill in the table with the query data.

	for STREAM in $(seq 1 "${STREAMS}"); do
		printf "%8d" "${STREAM}"
		for Q in $(seq "${Q0}" "${Q1}"); do
			if [ "${Q}" -eq 23 ]; then
				STRING="^PERF\.THRUPUT\.RFST${STREAM}\.RF1,"
				Q=1
			elif [ "${Q}" -eq 24 ]; then
				STRING="^PERF\.THRUPUT\.RFST${STREAM}\.RF2,"
				Q=2
			else
				STRING="^PERF\.THRUPUT\.QS${STREAM}\.Q${Q},"
			fi

			printf "  %8.2f" \
					"$(grep "${STRING}" "${QTIME}" | cut -d "," -f 5)"
			if [ $HTML -eq 1 ]; then
				printf " %34s" "\`P <throughput/plans/${STREAM}/${Q}.txt>\`__"
				printf " %36s" \
						"\`R <throughput/results/${STREAM}/${Q}.txt>\`__"
			fi
		done
		echo
	done

	printf "     Min"
	for Q in $(seq "${Q0}" "${Q1}"); do
		if [ "${Q}" -eq 23 ]; then
			STRING="^PERF\.THRUPUT\.RFST.*\.RF1,"
		elif [ "${Q}" -eq 24 ]; then
			STRING="^PERF\.THRUPUT\.RFST.*\.RF2,"
		else
			STRING="^PERF\.THRUPUT\.QS${STREAM}\.Q${Q},"
		fi

		if [ $HTML -eq 1 ]; then
			SIZE=80
		else
			SIZE=8
		fi

		printf "  %${SIZE}.2f" \
				"$(grep "${STRING}" "${QTIME}" \
						| cut -d "," -f 5 | sort -n | head -n 1)"
	done
	echo

	printf "     Max"
	for Q in $(seq "${Q0}" "${Q1}"); do
		if [ "${Q}" -eq 23 ]; then
			STRING="^PERF\.THRUPUT\.RFST.*\.RF1,"
		elif [ "${Q}" -eq 24 ]; then
			STRING="^PERF\.THRUPUT\.RFST.*\.RF2,"
		else
			STRING="^PERF\.THRUPUT\.QS${STREAM}\.Q${Q},"
		fi

		if [ $HTML -eq 1 ]; then
			SIZE=80
		else
			SIZE=8
		fi

		printf "  %${SIZE}.2f" \
				"$(grep "${STRING}" "${QTIME}" \
						| cut -d "," -f 5 | sort -n | tail -n 1)"
	done
	echo

	printf "     Avg"
	for Q in $(seq "${Q0}" "${Q1}"); do
		if [ "${Q}" -eq 23 ]; then
			STRING="^PERF\.THRUPUT\.RFST.*\.RF1,"
		elif [ "${Q}" -eq 24 ]; then
			STRING="^PERF\.THRUPUT\.RFST.*\.RF2,"
		else
			STRING="^PERF\.THRUPUT\.QS${STREAM}\.Q${Q},"
		fi

		if [ $HTML -eq 1 ]; then
			SIZE=80
		else
			SIZE=8
		fi

		SUM=$(grep "${STRING}" "${QTIME}" \
						| cut -d "," -f 5 | xargs | tr ' ' + | bc -l)
		printf "  %${SIZE}.2f" "$(echo "${SUM} / ${STREAMS}" | bc -l)"
	done
	echo

	# Construct the bottom of the table.

	printf "%s" "${QSEGMENT}"
	for Q in $(seq "${Q0}" "${Q1}"); do
		printf "  %s" "${QSEGMENT}"
		if [ $HTML -eq 1 ]; then
			printf "%s" "${QEXTRASEGMENT}"
		fi
	done
	echo
}

throughput_summary() {
	if [ ! -d "${INDIR}/throughput" ]; then
		echo "+-----------+-----------+------------------------+------------------------+------------------------+"
		return
	fi

	for STREAM in $(seq 1 "${STREAMS}"); do
		printf "| %9d | %9.2f | %.22s | %.22s | %.22s |\n" \
				"${STREAM}" \
				"$(grep "^PERF\.THRUPUT\.QS${STREAM}\.ALL," "${QTIME}" \
						| cut -d "," -f 5)" \
				"$(grep "^PERF\.THRUPUT\.QS${STREAM}\.Q" "${QTIME}" \
						| cut -d "," -f 2 | sort | head -n 1)" \
				"$(grep "^PERF\.THRUPUT\.RFST${STREAM}\.RF1" "${QTIME}" \
						| cut -d "," -f 2)" \
				"$(grep "^PERF\.THRUPUT\.RFST${STREAM}\.RF2" "${QTIME}" \
						| cut -d "," -f 2)"
		echo "+-----------+           +------------------------+------------------------+------------------------+"
		printf "| %9d |           | %.22s | %.22s | %.22s |\n" \
				$(( SEED + STREAM )) \
				"$(grep "^PERF\.THRUPUT\.QS${STREAM}\.Q" "${QTIME}" \
						| cut -d "," -f 3 | sort | tail -n 1)" \
				"$(grep "^PERF\.THRUPUT\.RFST${STREAM}\.RF1" "${QTIME}" \
						| cut -d "," -f 3)" \
				"$(grep "^PERF\.THRUPUT\.RFST${STREAM}\.RF2" "${QTIME}" \
						| cut -d "," -f 3)"
		echo "+-----------+-----------+------------------------+------------------------+------------------------+"
	done
}

HTML=0
# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-i)
		shift
		INDIR="${1}"
		QTIME=$INDIR/q_time.csv
		;;
	(-h)
		HTML=1
		;;
	(-n)
		shift
		STREAMS="${1}"
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 3) v@PROJECT_VERSION@"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

SEED=$(cat "${INDIR}/seed")

cat << EOF
Power Test
----------

* Seed: ${SEED}

+--------------------+------------------------+------------------------+------------------------+
| Duration (seconds) |    Query Start Time    |     RF1 Start Time     |     RF2 Start Time     |
|                    +------------------------+------------------------+------------------------+
|                    |     Query End Time     |      RF1 End Time      |      RF2 End Time      |
+====================+========================+========================+========================+
$(power_summary)

=======  =========================  $(if [ $HTML -eq 1 ]; then echo "=="; fi)
 Query    Response Time (seconds)
=======  =========================  $(if [ $HTML -eq 1 ]; then echo "=="; fi)
$(power_query_times)

Throughput Test
---------------

Stream execution summary:

+-----------+-----------+------------------------+------------------------+------------------------+
|  Stream   | Duration  |    Query Start Time    |     RF1 Start Time     |     RF2 Start Time     |
+-----------+ (seconds) +------------------------+------------------------+------------------------+
|   Seed    |           |     Query End Time     |      RF1 End Time      |      RF2 End Time      |
+===========+===========+========================+========================+========================+
$(throughput_summary)

Query execution duration (seconds)$(if [ $HTML -eq 1 ]; then printf " (Click **P** for plans and **R** for results)"; fi):

$(throughput_query 1 7)

$(throughput_query 8 14)

$(throughput_query 15 21)

$(throughput_query 22 22)
EOF

exit 0
