#!/bin/bash
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-3 Authors

trap 'ts-sysstat -o "${OUTPUT_DIR}/sysstat" -s; \
		eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat -s"' INT TERM

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 3 (DBT-3) load tester

Usage:
  $(basename "${0}") [OPTION]

Options:
  -a DBMS        database management system to test
  -c             resort tables after loading
  -C             number of chunks to load
  -d             direct data load
  -f SCALE       database scale factor, default 1
  -g             generate flat files
  -l             only load data
  -o DIRECTORY   path to store test results
  -R             materialized view mode
  -S             enable system and database stats collection
  -U             run test as an unprivileged user
  -Y             enable profiling (Linux only)
  -V, --version  output version information, then exit
  -?, --help     show this help, then exit

DBMS options are:
  monetdb    MonetDB
  mysql      MySQL
  pgsql      PostgreSQL
  pgxl       Postgres-XL
  virtuoso   Virtuoso

PostgreSQL specific options:
  -p             database parameters for the load test

@HOMEPAGE@
EOF
}

stop_procs() {
	if which ts-sysstat > /dev/null 2>&1; then
		ts-sysstat -o "${OUTPUT_DIR}/sysstat" -s &
	fi
	if which "ts-${DATABASE}-stat" > /dev/null 2>&1; then
		eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat -s &"
	fi
}
trap 'stop_procs' INT TERM

DIRECT_LOAD=0
DIRECT_LOAD_ARG=""
GENERATE=0
MPP=0
PRIVILEGED=1
PROFILE=0
RESORT=0
SF=0
STATS=0

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-a)
		shift
		DATABASE="${1}"
		if [ "x$DATABASE" = "xpgxl" ]; then
			MPP=1
		fi
		;;
	(-c)
		RESORT=1
		;;
	(-C)
		shift
		CHUNKS="${1}"
		;;
	(-d)
		DIRECT_LOAD=1
		DIRECT_LOAD_ARG="-d"
		;;
	(-f)
		shift
		SF="${1}"
		;;
	(-g)
		shift
		GENERATE="${1}"
		;;
	(-o)
		shift
		OUTPUT_DIR="${1}"
		mkdir -p $OUTPUT_DIR
		;;
	(-p)
		shift
		PARAMETERS_ARG="-p \"${1}\""
		;;
	(-t)
		TABLESPACE_FLAG="-t -b"
		;;
	(-S)
		STATS=1
		;;
	(-U)
		PRIVILEGED=0
		UNPRIVILEGED_ARG="-U"
		;;
	(-Y)
		PROFILE=1
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 3) v@PROJECT_VERSION@"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ "x$DBGEN" = "x" ]; then
	echo "set DBGEN environment variable to aboslute path to dbgen binary"
	exit 1
fi

if [ "x$DATABASE" = "x" ]; then
	echo "Specify database management system with -a flag"
	usage
	exit 1
elif [ "x$DATABASE" = "xpgxl" ]; then
	. $HOME/pgxc_ctl/pgxc_ctl.conf
	for HOSTNAME in ${datanodeMasterServers[*]}; do
		ssh $HOSTNAME "mkdir -p $OUTPUT_DIR"
	done
fi

mkdir -p "${OUTPUT_DIR}/output"

# Automatically parallelize to the number of available processors if not
# specified otherwise.
if [ "x${CHUNKS}" = "x" ]; then
	if [ -f "/proc/stat" ]; then
		CPUS=`grep cpu /proc/stat | wc -l`
		CHUNKS=$(( $CPUS - 1 ))
		echo "detected $CHUNKS processors for parallel loading"
	else
		CHUNKS=1
	fi
fi

which gzip > /dev/null 2>&1
if [ $? -eq 0 ]; then
	GZIP=gzip
else
	GZIP=true
fi

mkdir -p $DSS_PATH || exit 1

# Check to see if we have the files. If we don't have them then create them.
if [ $DIRECT_LOAD -ne 1 ]; then
	have_all_files=1
	for f in customer lineitem nation orders partsupp part region supplier; do
		if [ $CHUNKS -eq 1 ] || [ "$f" = "nation" ] || [ "$f" = "region" ]; then
			if ! test -f $DSS_PATH/$f.tbl ; then
				have_all_files=0
			fi
		else
			i=1
			while [ $i -le $CHUNKS ]; do
				if ! test -f $DSS_PATH/$f.tbl.$i ; then
					have_all_files=0
				fi
				i=$(( $i + 1 ))
			done
		fi
	done
fi

if [ $DIRECT_LOAD -eq 1 ]; then
	echo "Creating the database with a direct load from dbgen."
elif [ $GENERATE -ne 0 ] || [ $have_all_files -eq 0 ]; then
	echo "`date` Generating data for scale factor $SF ..."
	# DBGEN reads DSS_PATH env var to determine where to put the files
	if [ $CHUNKS -eq 1 ]; then
		eval "\"${DBGEN}\" -s ${SF}" || exit 1

		if [ $RESORT -eq 1 ]; then
			echo "`date` resorting data files..."
			mv $DSS_PATH/lineitem.tbl $DSS_PATH/lineitem.tbl.orig
			sort -t "|" -k 11 -k 12 $DSS_PATH/lineitem.tbl.orig \
					> $DSS_PATH/lineitem.tbl
			$GZIP $DSS_PATH/lineitem.tbl.orig

			mv $DSS_PATH/orders.tbl $DSS_PATH/orders.tbl.orig
			sort -t "|" -k 5 $DSS_PATH/orders.tbl.orig \
					> $DSS_PATH/orders.tbl
			$GZIP $DSS_PATH/orders.tbl.orig

			mv $DSS_PATH/part.tbl $DSS_PATH/part.tbl.orig
			sort -t "|" -k 6 $DSS_PATH/part.tbl.orig \
					> $DSS_PATH/part.tbl
			$GZIP $DSS_PATH/part.tbl.orig
		fi
	else
		i=1
		eval "\"${DBGEN}\" -s ${SF} -T n &" \
				> "${OUTPUT_DIR}/output/dbgen-n.log" 2>&1
		eval "\"${DBGEN}\" -s ${SF} -T r &" \
				> "${OUTPUT_DIR}/output/dbgen-r.log" 2>&1
		wait
		for TABLE in c O L P S s; do
			for i in $(seq 1 ${CHUNKS}); do
				eval "\"$DBGEN\" -s $SF -C $CHUNKS -S $i -T $TABLE &" \
						> "${OUTPUT_DIR}/output/dbgen-${TABLE}.log" 2>&1
			done
			wait
		done
	fi
	wait
else
	echo "Creating the database using existing data files."
fi

if [ $STATS -eq 1 ]; then
	# Start collecting system statistics.
	if ! which ts-sysstat > /dev/null 2>&1; then
		echo "WARNING: ts-sysstat not found for system stats collection"
	else
		ts-sysstat -o "${OUTPUT_DIR}/sysstat" &
	fi
fi

if [ $PRIVILEGED -eq 1 ]; then
	eval dbt3-$DATABASE-create-db -o $OUTPUT_DIR $PARAMETERS_ARG
fi

dbt3-$DATABASE-drop-tables || exit 1
dbt3-$DATABASE-create-tables $TABLESPACE_FLAG || exit 1

if [ $STATS -eq 1 ]; then
	# Collect database statistics
	if ! which "ts-${DATABASE}-stat" > /dev/null 2>&1; then
		printf "WARNING: %s not found for database stats " \
				"ts-${DATABASE}-stat"
		echo "collection"
	else
		eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat &"
	fi
fi

echo "Load Test starting at `date`"
s_time=`date +%s`
dbt3-$DATABASE-time-statistics -s -n LOAD || exit 1

if [ $PROFILE -eq 1 ]; then
	ts-profile -o "${OUTPUT_DIR}/profile" sleep 1 &
fi

eval "dbt3-${DATABASE}-load-data -C ${CHUNKS} -o ${OUTPUT_DIR} \
		${DIRECT_LOAD_ARG} ${UNPRIVILEGED_ARG}" || exit 1

dbt3-$DATABASE-time-statistics -e -n LOAD || exit 1
e_time=`date +%s`
diff_time=`expr $e_time - $s_time`
echo "Elapsed time for Load Test : $diff_time seconds"

if [ $STATS -eq 1 ]; then
	stop_procs
fi

# Brute force.
if [ $MPP -eq 1 ]; then
	for HOSTNAME in ${coordMasterServers[*]} ${datanodeMasterServers[*]}; do
		ssh $HOSTNAME "killall -9 sar sadc pidstat"
	done
fi

if [ $PROFILE -eq 1 ]; then
	ts-profile -o "${OUTPUT_DIR}/profile" -p
fi
