#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-3 Authors

usage()
{
	echo "`basename $0` is the DBT-3 PostgreSQL Report Generator"
	echo ""
	echo "Usage:"
	echo "  `basename $0` [OPTIONS]"
	echo ""
	echo "General options:"
	echo "  -i PATH          results directory"
}

create_stat_page()
{
	TAG=$1

	OUTDIR="${PIDSTATDIR}/$TAG"
	mkdir -p $OUTDIR

	cat > ${OUTDIR}/index.rst << __EOF__
================================================================================
Database Test 3 pidstat $TAG Charts
================================================================================

$(show_images $TAG)
__EOF__
}

links_index_metrics()
{
	NAME=$1

	INDEXMETRICS=$( (cd "${INDIR}/${NAME}/dbstat/index" && \
			find . -name "*.png") | sed -e "s/.\/pgsql-*.*.*-//" | \
			sed -e "s/.png$//" | sort | uniq)

	for METRIC in $INDEXMETRICS; do
		printf "\`%s <%s/dbstat/index-stat/i_%s/>\`__ " \
				"${METRIC}" "${NAME}" "${METRIC}"
	done
}

links_indexes()
{
	NAME=$1

	grep ^public\. "${INDIR}/${NAME}/dbstat/index-list.txt" | \
			grep -v "\.pg_catalog\." | while IFS= read -r INDEX; do
		printf "\`%s <%s/dbstat/index/%s/>\`__ " "${INDEX}" "${NAME}" \
				"${INDEX}"
	done
}

links_table_metrics()
{
	NAME=$1

	TABLEMETRICS=$( (cd "${INDIR}/${NAME}/dbstat/table" && \
			find . -name "*.png") | sed -e "s/^.\/pgsql-*.*-//" | \
			sed -e "s/.png$//" | sort | uniq)

	for METRIC in $TABLEMETRICS; do
		printf "\`%s <%s/dbstat/table-stat/t_%s/>\`__ " \
				"${METRIC}" "${NAME}" "${METRIC}"
	done
}

links_tables()
{
	NAME=$1

	grep ^public\. "${INDIR}/${NAME}/dbstat/table-list.txt" | \
			while IFS= read -r TABLE; do
		printf "\`%s <%s/dbstat/table/%s/>\`__ " \
				"${TABLE}" "${NAME}" "${TABLE}"
	done
}

list_processes()
{
	for T in autovacuum bgwriter checkpointer logger logical statscollector \
			walwriter; do
		create_stat_page $T
		printf " \`%s <%s/sysstat/%s/>\`__" "${T}" "${DIRECTORY}" "${T}"
	done
	echo ""
}


summarize()
{
	TITLE=$1
	DIRECTORY=$2
	PIDSTATDIR="${INDIR}/${DIRECTORY}/sysstat"

	which dbt-pgsql-generate-db-report > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		dbt-pgsql-generate-db-report -t "Database Test 3" -d dbt3 \
				-i "${INDIR}/${DIRECTORY}/dbstat"
	fi
	which dbt-pgsql-generate-table-report > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		dbt-pgsql-generate-table-report -t "Database Test 3" \
				-i "${INDIR}/${DIRECTORY}/dbstat/table-list.txt"
	fi
	which dbt-pgsql-generate-index-report > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		dbt-pgsql-generate-index-report -t "Database Test 3" \
				-i "${INDIR}/${DIRECTORY}/dbstat/index-list.txt"
	fi

	cat << __EOF__
$TITLE
--------------------------------------------------------------------------------

* \`Database Settings <${DIRECTORY}/dbstat/params.csv>\`__
* Per Process Statistics:$(list_processes)

.. list-table::

   * - Database Stats Charts
     - \`dbt3 <${DIRECTORY}/dbstat/db/dbt3>\`__
   * - Database Table Stats Charts:
     - $(links_tables ${DIRECTORY})
   * - Database Index Stats Charts:
     - $(links_indexes ${DIRECTORY})
   * - Database Tables by Metric:
     - $(links_table_metrics ${DIRECTORY})
   * - Database Indexs by Metric:
     - $(links_index_metrics ${DIRECTORY})

__EOF__
}

show_images()
{
	TAG=$1

	TAGPIDS=$(grep "${TAG}" "${PIDSTATDIR}/pidstat-index.txt" | \
			cut -d " " -f 1)

	for P in ${TAGPIDS}; do
		CHARTS=$(find "${PIDSTATDIR}" -type f -name "pidstat-${P}-*.png" | \
				sort)
		for CHART in $CHARTS; do
			BCHART=$(basename "${CHART}")
			echo ".. image:: ../pidstat/${BCHART}"
			echo "   :target: ../pidstat/${BCHART}"
			echo "   :width: 100%"
			echo ""
		done
	done
}

while getopts "hi:" opt; do
	case $opt in
	h)
		usage
		exit 1
		;;
	i)
		INDIR="$OPTARG"
		;;
	\?)
		exit 1
		;;
	esac
done

if [ "x${INDIR}" = "x" ]; then
	echo "Specify dbt3 results directory with -i"
	exit 1
fi

if [ $FAST -ne 1 ]; then
	find "${INDIR}" -type d -name dbstat | while IFS= read -r DBDIR; do
		ts-plot-pgsql -d dbt3 -i "${DBDIR}"
	done
fi

cat << __EOF__
PostgreSQL Report
=================

$(summarize "Load Test" load)

$(summarize "Power Test" power)

$(summarize "Throughput Test" throughput)
__EOF__
