#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-3 Authors

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 3 (DBT-3) PostgreSQL data loader

Usage:
  $(basename "${0}") [OPTION]

Options:
  -C PARTITIONS  how many PARTITIONS to break data into
  -d             load data directory
  -o DIRECTORY   DIRECTORY to save any output, default current directory
  -t             use tablespaces
  -U             run test as an unprivileged user
  -V, --version  output version information, then exit
  -?, --help     show this help, then exit

@HOMEPAGE@
EOF
}

load_table()
{
	table=${1}
	file=${table}.tbl

	if [ $DIRECT_LOAD -eq 0 ]; then
		if [ $CHUNKS -eq 1 ] || [ "$table" = "nation" ] || \
				[ "$table" = "region" ]; then
			$PSQL << __EOF__ > "${OUTDIR}/output/load-${table}.log" 2>&1
COPY $table FROM '$DSS_PATH/$file' USING DELIMITERS '|';
__EOF__
		else
			i=1
			while [ $i -le $CHUNKS ]; do
				$PSQL << __EOF__ > "${OUTDIR}/output/load-${table}-${i}.log" 2>&1 &
COPY $table FROM '$DSS_PATH/$file.$i' USING DELIMITERS '|';
__EOF__
				i=$(( $i + 1 ))
			done
		fi
	else
		if [ "$table" = "customer" ]; then
			FLAG="c"
		elif [ "$table" = "lineitem" ]; then
			FLAG="L"
		elif [ "$table" = "nation" ]; then
			FLAG="n"
		elif [ "$table" = "orders" ]; then
			FLAG="O"
		elif [ "$table" = "part" ]; then
			FLAG="P"
		elif [ "$table" = "region" ]; then
			FLAG="r"
		elif [ "$table" = "supplier" ]; then
			FLAG="s"
		elif [ "$table" = "partsupp" ]; then
			FLAG="S"
		else
			echo "unknown table: $table"
			return
		fi

		if [ $CHUNKS -eq 1 ] || [ "$table" = "nation" ] || \
				[ "$table" = "region" ]; then
			if [ $PRIVILEGED -eq 1 ]; then
				$PSQL <<- __EOF__ > "${OUTDIR}/output/load-${table}.log" 2>&1 &
						COPY $table
						FROM PROGRAM '"$DBGEN" -s $SCALE_FACTOR -T $FLAG -o'
						USING DELIMITERS '|';
				__EOF__
			else
				eval "\"$DBGEN\" -s $SCALE_FACTOR -T $FLAG -o | \
						$PSQL \
						-c \"COPY $table FROM STDIN USING DELIMITERS '|'\" &" \
							> "${OUTDIR}/output/load-${table}.log" 2>&1
			fi
		else
			i=1
			while [ $i -le $CHUNKS ]; do
				if [ $PRIVILEGED -eq 1 ]; then
					$PSQL <<- __EOF__ > "${OUTDIR}/output/load-${table}-${i}.log" 2>&1 &
						COPY $table
						FROM PROGRAM
						'"$DBGEN" -s $SCALE_FACTOR -T $FLAG -o -C $CHUNKS -S $i'
						USING DELIMITERS '|';
					__EOF__
				else
					eval "\"$DBGEN\" -s $SCALE_FACTOR -T $FLAG -o -C $CHUNKS \
							-S $i | $PSQL \
							-c \"COPY $table FROM STDIN USING DELIMITERS '|'\" &" \
							> "${OUTDIR}/output/load-${table}-${i}.log" 2>&1
				fi
				i=$(( $i + 1 ))
			done
		fi
	fi
	wait
}

supplier()
{
	load_table supplier
}

supplier_ind()
{
	$PSQL <<- EOF &
		CREATE UNIQUE INDEX pk_supplier
		ON supplier (s_suppkey)
		WITH (fillfactor = 100)
		${TS_PK_SUPPLIER};
	EOF
	$PSQL <<- EOF &
		CREATE INDEX supplier_s_suppkey_idx_like
		ON supplier (s_suppkey)
		WITH (fillfactor = 100)
		${TS_SUPPLIER_S_SUPPKEY_IDX_LIKE}
		WHERE s_comment LIKE '%Customer%Complaints%';
	EOF
	if [ ${STRICT} -eq 0 ]; then
		$PSQL <<- EOF &
			CREATE INDEX supplier_s_nationkey_s_suppkey_idx
			ON supplier (s_nationkey, s_suppkey)
			WITH (fillfactor = 100)
			${TS_SUPPLIER_S_NATIONKEY_S_SUPPKEY_IDX};
		EOF
	fi

	wait

	$PSQL <<- EOF &
		VACUUM ANALYZE supplier;
	EOF
	wait
}

part()
{
	load_table part
}

part_ind()
{
	$PSQL <<- EOF &
		CREATE UNIQUE INDEX pk_part
		ON part (p_partkey)
		WITH (fillfactor = 100)
		${TS_PK_PART};
	EOF
	if [ ${STRICT} -eq 0 ]; then
		$PSQL <<- EOF &
			CREATE INDEX part_p_type_p_partkey_idx
			ON part(p_type, p_partkey)
			WITH (fillfactor = 100)
			${TS_PART_P_TYPE_P_PARTKEY_IDX};
		EOF
		$PSQL <<- EOF &
			CREATE INDEX part_p_container_p_brand_p_partkey_idx
			ON part(p_container, p_brand, p_partkey)
			WITH (fillfactor = 100)
			${TS_PART_P_CONTAINER_P_BRAND_P_PARTKEY_IDX};
		EOF
		$PSQL <<- EOF &
			CREATE INDEX part_ios_test1
			ON part USING btree (p_size, p_partkey, p_brand, p_type)
			WITH (fillfactor = 100)
			${TS_PART_IOS_TEST1};
		EOF
		$PSQL <<- EOF &
			CREATE INDEX part_p_size_idx
			ON part USING BRIN (p_size)
			${TS_PART_P_SIZE_IDX};
		EOF
	fi

	wait

	$PSQL <<- EOF &
		VACUUM ANALYZE part;
	EOF
	wait
}

partsupp()
{
	load_table partsupp
}

partsupp_ind()
{
	$PSQL <<- EOF &
		CREATE UNIQUE INDEX pk_partsupp
		ON partsupp (ps_partkey, ps_suppkey)
		WITH (fillfactor = 100)
		${TS_PK_PARTSUPP};
	EOF
	$PSQL <<- EOF &
		CREATE INDEX partsupp_ps_suppkey_idx
		ON partsupp (ps_suppkey)
		WITH (fillfactor = 100)
		${TS_PARTSUPP_PS_SUPPKEY_IDX};
	EOF

	wait

	$PSQL <<- EOF &
		VACUUM ANALYZE partsupp;
	EOF
	wait
}

customer()
{
	load_table customer
}

customer_ind()
{
	$PSQL <<- EOF &
		CREATE UNIQUE INDEX pk_customer
		ON customer (c_custkey)
		WITH (fillfactor = 100)
		${TS_PK_CUSTOMER};
	EOF
	$PSQL <<- EOF &
		CREATE INDEX customer_c_nationkey_c_custkey_idx
		ON customer (c_nationkey, c_custkey)
		WITH (fillfactor = 100)
		${TS_CUSTOMER_C_NATIONKEY_C_CUSTKEY_IDX};
	EOF
	if [ ${STRICT} -eq 0 ]; then
		$PSQL <<- EOF &
			CREATE INDEX customer_c_phone_idx_c_acctbal
			ON customer (substr(c_phone::text, 1, 2))
			${TS_CUSTOMER_C_PHONE_IDX_C_ACCTBAL}
			WHERE c_acctbal > 0.00;
		EOF
		$PSQL <<- EOF &
			CREATE INDEX customer_c_phone_c_acctbal_c_custkey_idx
			ON customer (substring(c_phone from 1 for 2), c_acctbal, c_custkey)
			WITH (fillfactor = 100)
			${TS_CUSTOMER_C_PHONE_C_ACCTBAL_C_CUSTKEY_IDX};
		EOF
		$PSQL <<- EOF &
			CREATE INDEX customer_c_mktsegment_c_custkey_idx
			ON customer (c_mktsegment, c_custkey)
			WITH (fillfactor = 100)
			${TS_CUSTOMER_C_MKTSEGMENT_C_CUSTKEY_IDX};
		EOF
	fi

	wait

	$PSQL <<- EOF &
		VACUUM ANALYZE customer;
	EOF
	wait
}

orders()
{
	load_table orders
}

orders_ind()
{
	$PSQL <<- EOF &
		CREATE UNIQUE INDEX pk_orders
		ON orders (o_orderkey) WITH (fillfactor = 100)
		${TS_PK_ORDERS};
	EOF
	if [ ${STRICT} -eq 0 ]; then
		$PSQL <<- EOF &
			CREATE INDEX orders_o_orderkey_o_orderdate_idx
			ON orders (o_orderkey, o_orderdate)
			WITH (fillfactor = 100)
			${TS_ORDERS_O_ORDERKEY_O_ORDERDATE_IDX};
		EOF
	fi
	$PSQL <<- EOF &
		CREATE INDEX orders_o_custkey_idx
		ON orders (o_custkey)
		WITH (fillfactor = 100)
		${TS_ORDERS_O_CUSTKEY_IDX};
	EOF
	$PSQL <<- EOF &
		CREATE INDEX orders_o_orderdate_idx
		ON orders USING BRIN (o_orderdate)
		${TS_ORDERS_O_ORDERDATE_IDX};
	EOF

	wait

	$PSQL <<- EOF &
		VACUUM ANALYZE orders;
	EOF
	wait
}

lineitem()
{
	load_table lineitem
}

lineitem_ind()
{
	$PSQL <<- EOF &
		CREATE UNIQUE INDEX pk_lineitem
		ON lineitem (l_orderkey, l_linenumber)
		WITH (fillfactor = 100)
		${TS_PK_LINEITEM};
	EOF
	if [ ${STRICT} -eq 0 ]; then
		$PSQL <<- EOF &
			CREATE INDEX lineitem_l_partkey_l_quantity_l_shipmode_idx
			ON lineitem (l_partkey, l_quantity, l_shipmode)
			WITH (fillfactor = 100)
			${TS_LINEITEM_L_PARTKEY_L_QUANTITY_L_SHIPMODE_IDX};
		EOF
	fi
	$PSQL <<- EOF &
		CREATE INDEX lineitem_l_orderkey_idx_l_returnflag
		ON lineitem (l_orderkey)
		WITH (fillfactor = 100)
		${TS_LINEITEM_L_ORDERKEY_IDX_L_RETURNFLAG}
		WHERE l_returnflag = 'R';
	EOF
	$PSQL <<- EOF &
		CREATE INDEX lineitem_l_orderkey_idx_part2
		ON lineitem (l_orderkey)
		WITH (fillfactor = 100)
		${TS_LINEITEM_L_ORDERKEY_IDX_PART2}
		WHERE l_commitdate < l_receiptdate
		  AND l_shipdate < l_commitdate;
	EOF
	if [ ${STRICT} -eq 0 ]; then
		$PSQL <<- EOF &
			CREATE INDEX lineitem_l_orderkey_l_suppkey_l_quantity_idx
			ON lineitem (l_orderkey, l_suppkey, l_quantity)
			WITH (fillfactor = 100)
			${TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_L_QUANTITY_IDX};
		EOF
	fi
	# Q4, Q21
	$PSQL <<- EOF &
		CREATE INDEX lineitem_l_orderkey_l_suppkey_idx
		ON lineitem (l_orderkey, l_suppkey)
		WITH (fillfactor = 100)
		${TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_IDX}
		WHERE l_commitdate < l_receiptdate;
	EOF
	if [ ${STRICT} -eq 0 ]; then
		$PSQL <<- EOF &
			CREATE INDEX lineitem_l_partkey_l_suppkey_l_shipdate_l_quantity_idx
			ON lineitem (l_partkey, l_suppkey, l_shipdate, l_quantity)
			WITH (fillfactor = 100)
			${TS_LINEITEM_L_PARTKEY_L_SUPPKEY_L_SHIPDATE_L_QUANTITY_IDX};
		EOF
	fi
	$PSQL <<- EOF &
		CREATE INDEX lineitem_l_shipdate_idx
		ON lineitem USING BRIN (l_shipdate)
		${TS_LINEITEM_L_SHIPDATE_IDX};
	EOF
	$PSQL <<- EOF &
		CREATE INDEX lineitem_l_receiptdate_idx
		ON lineitem USING BRIN (l_receiptdate)
		${TS_LINEITEM_L_RECEIPTDATE_IDX};
	EOF

	wait

	$PSQL <<- EOF &
		VACUUM ANALYZE lineitem;
	EOF
	wait
}

nation()
{
	load_table nation
}

nation_ind()
{
	$PSQL <<- EOF &
		CREATE UNIQUE INDEX pk_nation
		ON nation (n_nationkey)
		WITH (fillfactor = 100)
		${TS_PK_NATION};
	EOF

	wait

	$PSQL <<- EOF &
		VACUUM ANALYZE nation;
	EOF
	wait
}

region()
{
	load_table region
}

region_ind()
{
	$PSQL <<- EOF &
		CREATE UNIQUE INDEX pk_region
		ON region (r_regionkey)
		WITH (fillfactor = 100)
		${TS_PK_REGION};
	EOF

	wait

	$PSQL <<- EOF &
		VACUUM ANALYZE region;
	EOF
	wait
}

DIRECT_LOAD=0
NODES=0
OUTDIR="."
PRIVILEGED=1
STRICT=1
USE_TABLESPACES=0
# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-C)
		shift
		CHUNKS="${1}"
		;;
	(-d)
		DIRECT_LOAD=1
		;;
	(-o)
		shift
		OUTDIR="${1}"
		;;
	(--relax)
		STRICT=0
		;;
	(-t)
		USE_TABLESPACES=1
		;;
	(-U)
		PRIVILEGED=0
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 3) v@PROJECT_VERSION@"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

mkdir -p "${OUTDIR}/output"

# Automatically parallelize to the number of available processors if not
# specified otherwise.
if [ "x${CHUNKS}" = "x" ]; then
	if [ -f "/proc/stat" ]; then
		CPUS=`grep cpu /proc/stat | wc -l`
		CHUNKS=$(( $CPUS - 1 ))
		echo "detected $CHUNKS processors for parallel loading"
	else
		CHUNKS=1
	fi
fi

PSQL="psql -X"

if [ ${USE_TABLESPACES} -eq 1 ]; then
	if [ ! -d "${TSDIR}" ]; then
		echo "ERROR: TSDIR does not exist: ${TSDIR}"
		exit 1
	fi

	#
	# Creating 'ts' subdirectories because PostgreSQL doesn't like that
	# 'lost+found' directory if a device was mounted at
	# '${DBT2TSDIR}/supplier', for example.
	#

	TS_PK_SUPPLIER_DIR="${TSDIR}/pk_supplier/ts"
	TS_PK_PART_DIR="${TSDIR}/pk_part/ts"
	TS_PK_PARTSUPP_DIR="${TSDIR}/pk_partsupp/ts"
	TS_PK_CUSTOMER_DIR="${TSDIR}/pk_customer/ts"
	TS_PK_ORDERS_DIR="${TSDIR}/pk_orders/ts"
	TS_PK_LINEITEM_DIR="${TSDIR}/pk_lineitem/ts"
	TS_PK_NATION_DIR="${TSDIR}/pk_nation/ts"
	TS_PK_REGION_DIR="${TSDIR}/pk_region/ts"
	TS_SUPPLIER_S_SUPPKEY_IDX_LIKE_DIR="${TSDIR}/supplier_s_suppkey_idx_like/ts"
	if [ ${STRICT} -eq 0 ]; then
		TS_SUPPLIER_S_NATIONKEY_S_SUPPKEY_IDX_DIR="${TSDIR}/supplier_s_nationkey_s_suppkey_idx/ts"
		TS_PART_P_TYPE_P_PARTKEY_IDX_DIR="${TSDIR}/part_p_type_p_partkey_idx/ts"
		TS_PART_P_CONTAINER_P_BRAND_P_PARTKEY_IDX_DIR="${TSDIR}/part_p_container_p_brand_p_partkey_idx/ts"
		TS_PART_IOS_TEST1_DIR="${TSDIR}/part_ios_test1/ts"
		TS_PART_P_SIZE_IDX_DIR="${TSDIR}/part_p_size_idx/ts"
	fi
	TS_PARTSUPP_PS_SUPPKEY_IDX_DIR="${TSDIR}/partsupp_ps_suppkey_idx/ts"
	TS_CUSTOMER_C_NATIONKEY_C_CUSTKEY_IDX_DIR="${TSDIR}/customer_c_nationkey_c_custkey_idx/ts"
	if [ ${STRICT} -eq 0 ]; then
		TS_CUSTOMER_C_PHONE_IDX_C_ACCTBAL_DIR="${TSDIR}/customer_c_phone_idx_c_acctbal/ts"
		TS_CUSTOMER_C_PHONE_C_ACCTBAL_C_CUSTKEY_IDX_DIR="${TSDIR}/customer_c_phone_c_acctbal_c_custkey_idx/ts"
		TS_CUSTOMER_C_MKTSEGMENT_C_CUSTKEY_IDX_DIR="${TSDIR}/customer_c_mktsegment_c_custkey_idx/ts"
		TS_ORDERS_O_ORDERKEY_O_ORDERDATE_IDX_DIR="${TSDIR}/orders_o_orderkey_o_orderdate_idx/ts"
	fi
	TS_ORDERS_O_CUSTKEY_IDX_DIR="${TSDIR}/orders_o_custkey_idx/ts"
	TS_ORDERS_O_ORDERDATE_IDX_DIR="${TSDIR}/orders_o_orderdate_idx/ts"
	if [ ${STRICT} -eq 0 ]; then
		TS_LINEITEM_L_PARTKEY_L_QUANTITY_L_SHIPMODE_IDX_DIR="${TSDIR}/lineitem_l_partkey_l_quantity_l_shipmode_idx/ts"
	fi
	TS_LINEITEM_L_ORDERKEY_IDX_L_RETURNFLAG_DIR="${TSDIR}/lineitem_l_orderkey_idx_l_returnflag/ts"
	TS_LINEITEM_L_ORDERKEY_IDX_PART2_DIR="${TSDIR}/lineitem_l_orderkey_idx_part2/ts"
	if [ ${STRICT} -eq 0 ]; then
		TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_L_QUANTITY_IDX_DIR="${TSDIR}/lineitem_l_orderkey_l_suppkey_l_quantity_idx/ts"
	fi
	TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_IDX_DIR="${TSDIR}/lineitem_l_orderkey_l_suppkey_idx/ts"
	if [ ${STRICT} -eq 0 ]; then
		TS_LINEITEM_L_PARTKEY_L_SUPPKEY_L_SHIPDATE_L_QUANTITY_IDX_DIR="${TSDIR}/lineitem_l_partkey_l_suppkey_l_shipdate_l_quantity_idx/ts"
	fi
	TS_LINEITEM_L_SHIPDATE_IDX_DIR="${TSDIR}/lineitem_l_shipdate_idx/ts"
	TS_LINEITEM_L_RECEIPTDATE_IDX_DIR="${TSDIR}/lineitem_l_receiptdate_idx/ts"

	mkdir -p ${TS_PK_SUPPLIER_DIR} || exit 1
	mkdir -p ${TS_PK_PART_DIR} || exit 1
	mkdir -p ${TS_PK_PARTSUPP_DIR} || exit 1
	mkdir -p ${TS_PK_CUSTOMER_DIR} || exit 1
	mkdir -p ${TS_PK_ORDERS_DIR} || exit 1
	mkdir -p ${TS_PK_LINEITEM_DIR} || exit 1
	mkdir -p ${TS_PK_NATION_DIR} || exit 1
	mkdir -p ${TS_PK_REGION_DIR} || exit 1
	mkdir -p ${TS_SUPPLIER_S_SUPPKEY_IDX_LIKE_DIR} || exit 1
	if [ ${STRICT} -eq 0 ]; then
		mkdir -p ${TS_SUPPLIER_S_NATIONKEY_S_SUPPKEY_IDX_DIR} || exit 1
		mkdir -p ${TS_PART_P_TYPE_P_PARTKEY_IDX_DIR} || exit 1
		mkdir -p ${TS_PART_P_CONTAINER_P_BRAND_P_PARTKEY_IDX_DIR} || exit 1
		mkdir -p ${TS_PART_IOS_TEST1_DIR} || exit 1
		mkdir -p ${TS_PART_P_SIZE_IDX_DIR} || exit 1
	fi
	mkdir -p ${TS_PARTSUPP_PS_SUPPKEY_IDX_DIR} || exit 1
	mkdir -p ${TS_CUSTOMER_C_NATIONKEY_C_CUSTKEY_IDX_DIR} || exit 1
	if [ ${STRICT} -eq 0 ]; then
		mkdir -p ${TS_CUSTOMER_C_PHONE_IDX_C_ACCTBAL_DIR} || exit 1
		mkdir -p ${TS_CUSTOMER_C_PHONE_C_ACCTBAL_C_CUSTKEY_IDX_DIR} || exit 1
		mkdir -p ${TS_CUSTOMER_C_MKTSEGMENT_C_CUSTKEY_IDX_DIR} || exit 1
		mkdir -p ${TS_ORDERS_O_ORDERKEY_O_ORDERDATE_IDX_DIR} || exit 1
	fi
	mkdir -p ${TS_ORDERS_O_CUSTKEY_IDX_DIR} || exit 1
	mkdir -p ${TS_ORDERS_O_ORDERDATE_IDX_DIR} || exit 1
	if [ ${STRICT} -eq 0 ]; then
		mkdir -p ${TS_LINEITEM_L_PARTKEY_L_QUANTITY_L_SHIPMODE_IDX_DIR} || exit 1
	fi
	mkdir -p ${TS_LINEITEM_L_ORDERKEY_IDX_L_RETURNFLAG_DIR} || exit 1
	mkdir -p ${TS_LINEITEM_L_ORDERKEY_IDX_PART2_DIR} || exit 1
	if [ ${STRICT} -eq 0 ]; then
		mkdir -p ${TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_L_QUANTITY_IDX_DIR} || exit 1
	fi
	mkdir -p ${TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_IDX_DIR} || exit 1
	if [ ${STRICT} -eq 0 ]; then
		mkdir -p ${TS_LINEITEM_L_PARTKEY_L_SUPPKEY_L_SHIPDATE_L_QUANTITY_IDX_DIR} || exit 1
	fi
	mkdir -p ${TS_LINEITEM_L_SHIPDATE_IDX_DIR} || exit 1
	mkdir -p ${TS_LINEITEM_L_RECEIPTDATE_IDX_DIR} || exit 1

	TS_PK_SUPPLIER="TABLESPACE dbt3_pk_supplier"
	TS_PK_PART="TABLESPACE dbt3_pk_part"
	TS_PK_PARTSUPP="TABLESPACE dbt3_pk_partsupp"
	TS_PK_CUSTOMER="TABLESPACE dbt3_pk_customer"
	TS_PK_ORDERS="TABLESPACE dbt3_pk_orders"
	TS_PK_LINEITEM="TABLESPACE dbt3_pk_lineitem"
	TS_PK_NATION="TABLESPACE dbt3_pk_nation"
	TS_PK_REGION="TABLESPACE dbt3_pk_region"
	TS_SUPPLIER_S_SUPPKEY_IDX_LIKE="TABLESPACE dbt3_supplier_s_suppkey_idx_like"
	if [ ${STRICT} -eq 0 ]; then
		TS_SUPPLIER_S_NATIONKEY_S_SUPPKEY_IDX="TABLESPACE dbt3_supplier_s_nationkey_s_suppkey_idx"
		TS_PART_P_TYPE_P_PARTKEY_IDX="TABLESPACE dbt3_part_p_type_p_partkey_idx"
		TS_PART_P_CONTAINER_P_BRAND_P_PARTKEY_IDX="TABLESPACE dbt3_part_p_container_p_brand_p_partkey_idx"
		TS_PART_IOS_TEST1="TABLESPACE dbt3_part_ios_test1"
		TS_PART_P_SIZE_IDX="TABLESPACE dbt3_part_p_size_idx"
	fi
	TS_PARTSUPP_PS_SUPPKEY_IDX="TABLESPACE dbt3_partsupp_ps_suppkey_idx"
	TS_CUSTOMER_C_NATIONKEY_C_CUSTKEY_IDX="TABLESPACE dbt3_customer_c_nationkey_c_custkey_idx"
	if [ ${STRICT} -eq 0 ]; then
		TS_CUSTOMER_C_PHONE_IDX_C_ACCTBAL="TABLESPACE dbt3_customer_c_phone_idx_c_acctbal"
		TS_CUSTOMER_C_PHONE_C_ACCTBAL_C_CUSTKEY_IDX="TABLESPACE dbt3_customer_c_phone_c_acctbal_c_custkey_idx"
		TS_CUSTOMER_C_MKTSEGMENT_C_CUSTKEY_IDX="TABLESPACE dbt3_customer_c_mktsegment_c_custkey_idx"
		TS_ORDERS_O_ORDERKEY_O_ORDERDATE_IDX="TABLESPACE dbt3_orders_o_orderkey_o_orderdate_idx"
	fi
	TS_ORDERS_O_CUSTKEY_IDX="TABLESPACE dbt3_orders_o_custkey_idx"
	TS_ORDERS_O_ORDERDATE_IDX="TABLESPACE dbt3_orders_o_orderdate_idx"
	if [ ${STRICT} -eq 0 ]; then
		TS_LINEITEM_L_PARTKEY_L_QUANTITY_L_SHIPMODE_IDX="TABLESPACE dbt3_lineitem_l_partkey_l_quantity_l_shipmode_idx"
	fi
	TS_LINEITEM_L_ORDERKEY_IDX_L_RETURNFLAG="TABLESPACE dbt3_lineitem_l_orderkey_idx_l_returnflag"
	TS_LINEITEM_L_ORDERKEY_IDX_PART2="TABLESPACE dbt3_lineitem_l_orderkey_idx_part2"
	if [ ${STRICT} -eq 0 ]; then
		TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_L_QUANTITY_IDX="TABLESPACE dbt3_lineitem_l_orderkey_l_suppkey_l_quantity_idx"
	fi
	TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_IDX="TABLESPACE dbt3_lineitem_l_orderkey_l_suppkey_idx"
	if [ ${STRICT} -eq 0 ]; then
		TS_LINEITEM_L_PARTKEY_L_SUPPKEY_L_SHIPDATE_L_QUANTITY_IDX="TABLESPACE dbt3_lineitem_l_partkey_l_suppkey_l_shipdate_l_quantity_idx"
	fi
	TS_LINEITEM_L_SHIPDATE_IDX="TABLESPACE dbt3_lineitem_l_shipdate_idx"
	TS_LINEITEM_L_RECEIPTDATE_IDX="TABLESPACE dbt3_lineitem_l_receiptdate_idx"

	#
	# Don't need to '|| exit 1' in case the tablespaces already exist.
	#
	${PSQL} <<- EOF
		CREATE ${TS_PK_SUPPLIER} LOCATION '${TS_PK_SUPPLIER_DIR}';
		CREATE ${TS_PK_PART} LOCATION '${TS_PK_PART_DIR}';
		CREATE ${TS_PK_PARTSUPP} LOCATION '${TS_PK_PARTSUPP_DIR}';
		CREATE ${TS_PK_CUSTOMER} LOCATION '${TS_PK_CUSTOMER_DIR}';
		CREATE ${TS_PK_ORDERS} LOCATION '${TS_PK_ORDERS_DIR}';
		CREATE ${TS_PK_LINEITEM} LOCATION '${TS_PK_LINEITEM_DIR}';
		CREATE ${TS_PK_NATION} LOCATION '${TS_PK_NATION_DIR}';
		CREATE ${TS_PK_REGION} LOCATION '${TS_PK_REGION_DIR}';
		CREATE ${TS_SUPPLIER_S_SUPPKEY_IDX_LIKE} LOCATION '${TS_SUPPLIER_S_SUPPKEY_IDX_LIKE_DIR}';
		CREATE ${TS_PARTSUPP_PS_SUPPKEY_IDX} LOCATION '${TS_PARTSUPP_PS_SUPPKEY_IDX_DIR}';
		CREATE ${TS_CUSTOMER_C_NATIONKEY_C_CUSTKEY_IDX} LOCATION '${TS_CUSTOMER_C_NATIONKEY_C_CUSTKEY_IDX_DIR}';
		CREATE ${TS_ORDERS_O_CUSTKEY_IDX} LOCATION '${TS_ORDERS_O_CUSTKEY_IDX_DIR}';
		CREATE ${TS_ORDERS_O_ORDERDATE_IDX} LOCATION '${TS_ORDERS_O_ORDERDATE_IDX_DIR}';
		CREATE ${TS_LINEITEM_L_ORDERKEY_IDX_L_RETURNFLAG} LOCATION '${TS_LINEITEM_L_ORDERKEY_IDX_L_RETURNFLAG_DIR}';
		CREATE ${TS_LINEITEM_L_ORDERKEY_IDX_PART2} LOCATION '${TS_LINEITEM_L_ORDERKEY_IDX_PART2_DIR}';
		CREATE ${TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_IDX} LOCATION '${TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_IDX_DIR}';
		CREATE ${TS_LINEITEM_L_SHIPDATE_IDX} LOCATION '${TS_LINEITEM_L_SHIPDATE_IDX_DIR}';
		CREATE ${TS_LINEITEM_L_RECEIPTDATE_IDX} LOCATION '${TS_LINEITEM_L_RECEIPTDATE_IDX_DIR}';
	EOF
	if [ ${STRICT} -eq 0 ]; then
		${PSQL} <<- EOF
			CREATE ${TS_SUPPLIER_S_NATIONKEY_S_SUPPKEY_IDX} LOCATION '${TS_SUPPLIER_S_NATIONKEY_S_SUPPKEY_IDX_DIR}';
			CREATE ${TS_PART_P_TYPE_P_PARTKEY_IDX} LOCATION '${TS_PART_P_TYPE_P_PARTKEY_IDX_DIR}';
			CREATE ${TS_PART_P_CONTAINER_P_BRAND_P_PARTKEY_IDX} LOCATION '${TS_PART_P_CONTAINER_P_BRAND_P_PARTKEY_IDX_DIR}';
			CREATE ${TS_PART_IOS_TEST1} LOCATION '${TS_PART_IOS_TEST1_DIR}';
			CREATE ${TS_PART_P_SIZE_IDX} LOCATION '${TS_PART_P_SIZE_IDX_DIR}';
			CREATE ${TS_CUSTOMER_C_PHONE_IDX_C_ACCTBAL} LOCATION '${TS_CUSTOMER_C_PHONE_IDX_C_ACCTBAL_DIR}';
			CREATE ${TS_CUSTOMER_C_PHONE_C_ACCTBAL_C_CUSTKEY_IDX} LOCATION '${TS_CUSTOMER_C_PHONE_C_ACCTBAL_C_CUSTKEY_IDX_DIR}';
			CREATE ${TS_CUSTOMER_C_MKTSEGMENT_C_CUSTKEY_IDX} LOCATION '${TS_CUSTOMER_C_MKTSEGMENT_C_CUSTKEY_IDX_DIR}';
			CREATE ${TS_ORDERS_O_ORDERKEY_O_ORDERDATE_IDX} LOCATION '${TS_ORDERS_O_ORDERKEY_O_ORDERDATE_IDX_DIR}';
			CREATE ${TS_LINEITEM_L_PARTKEY_L_QUANTITY_L_SHIPMODE_IDX} LOCATION '${TS_LINEITEM_L_PARTKEY_L_QUANTITY_L_SHIPMODE_IDX_DIR}';
			CREATE ${TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_L_QUANTITY_IDX} LOCATION '${TS_LINEITEM_L_ORDERKEY_L_SUPPKEY_L_QUANTITY_IDX_DIR}';
			CREATE ${TS_LINEITEM_L_PARTKEY_L_SUPPKEY_L_SHIPDATE_L_QUANTITY_IDX} LOCATION '${TS_LINEITEM_L_PARTKEY_L_SUPPKEY_L_SHIPDATE_L_QUANTITY_IDX_DIR}';
		EOF
	fi
fi

echo "Loading tables `date`"

supplier
part
partsupp
customer
orders
lineitem
nation
region

echo "Building indexes & vacuum analyze $(date)"

supplier_ind &
part_ind &
partsupp_ind &
customer_ind &
orders_ind &
lineitem_ind &
nation_ind &
region_ind &

wait
