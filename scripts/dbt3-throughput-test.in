#!/bin/bash
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-3 Authors

MPP=0
NO_REFRESH=0
NO_REFRESH_FLAG=
PRIVILEGED=1
EXTRA_ARGS=
STATS=0

usage()
{
	echo
	echo "`basename $0` is the DBT-3 throughput runner"
	echo ""
	echo "Usage:"
	echo "  `basename $0` [OPTIONS]"
	echo
	echo "Generate options:"
	echo "  -a DBMS         database management system to test"
	echo "  -f SCALE        database scale factor, default 1"
	echo "  -h              this help message"
	echo "  -n STREAMS      number of throughput streams"
	echo "  -o DIRECTORY    path to store test results"
	echo "  -s SEED         seed to use for power and throughput tests"
	echo "  -S              enable system and database stats collection"
	echo "  -u              use tablespaces"
	echo "  -U              run test as an unprivileged user"
	echo "  -Y              enable software profiling (Linux only)"
	echo "  -z              do not run refresh streams"
	echo ""
	echo "DBMS options are:"
	echo "  monetdb         MonetDB"
	echo "  mysql           MySQL"
	echo "  pgsql           PostgreSQL"
	echo "  pgxl            Postgres-XL"
	echo "  virtuoso        Virtuoso"
	echo ""
	echo "PostgreSQL specific options:"
	echo "  -e              EXPLAIN ANALYZE"
	echo "  -p              database parameters for the load test"
}

stop_procs() {
	if which ts-sysstat > /dev/null 2>&1; then
		ts-sysstat -o "${OUTPUT_DIR}/sysstat" -s &
	fi
	if which "ts-${DATABASE}-stat" > /dev/null 2>&1; then
		eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat -s &"
	fi
}
trap 'stop_procs' INT TERM

while getopts "a:ef:hn:o:p:s:SUz" opt; do
	case $opt in
	a) DATABASE=$OPTARG
		if [ "x$DATABASE" = "xpgxl" ]; then
			MPP=1
		fi
		;;
	e) EXTRA_ARGS="$EXTRA_ARGS -e"
		;;
	f) scale_factor=$OPTARG
		;;
	h) usage
		exit 0
		;;
	n) num_stream=$OPTARG
		;;
	o) OUTPUT_DIR=$OPTARG
		mkdir -p $OUTPUT_DIR/results
		;;
	p)
		PARAMETERS_ARG="-p \"$OPTARG\""
		;;
	s) SEED_FILE=$OPTARG
		;;
	S) STATS=1
		;;
	U) PRIVILEGED=0
		UNPRIVILEGED_ARG="-U"
		;;
	Y) PROFILE=1
		;;
	z) NO_REFRESH_FLAG="-z"
		NO_REFRESH=1
		;;
	\?) exit 1
		;;
	esac
done

if [ "x$DATABASE" = "x" ]; then
	echo "Specify database management system with -a flag"
	exit 1
fi

if [ "x$DATABASE" = "xpgxl" ]; then
	TAG="pgsql"
	. $HOME/pgxc_ctl/pgxc_ctl.conf
	for HOSTNAME in ${datanodeMasterServers=[$i]}; do
		ssh $HOSTNAME "mkdir -p $OUTPUT_DIR/results"
	done
else
	TAG=$DATABASE
fi

which gzip > /dev/null 2>&1
if [ $? -eq 0 ]; then
	GZIP=gzip
else
	GZIP=true
fi

read SEED < $SEED_FILE
echo "Seed : $SEED" > $OUTPUT_DIR/readme.txt

RUNDIR=$OUTPUT_DIR/run
mkdir -p $RUNDIR

if [ $PRIVILEGED -eq 1 ]; then
	dbt3-$DATABASE-stop-db
	eval dbt3-$DATABASE-start-db -o $OUTPUT_DIR $PARAMETERS_ARG || exit 1
fi

dbt3-$TAG-time-statistics -s -n PERF.THRUPUT || exit 1

# Start collecting system statistics. 
if [ $STATS -eq 1 ]; then
	if ! which ts-sysstat > /dev/null 2>&1; then
		echo "WARNING: ts-sysstat not found for system stats collection"
	else
		ts-sysstat -o "${OUTPUT_DIR}/sysstat" &
	fi

	# Collect database statistics
	if ! which "ts-${DATABASE}-stat" > /dev/null 2>&1; then
		printf "WARNING: %s not found for database stats " \
				"ts-${DATABASE}-stat"
		echo "collection"
	else
		eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat &"
	fi
fi

if [ "${MPP}" -eq 0 ] && [ "${PROFILE}" -eq 1 ]; then
	PERFDIR="${OUTPUT_DIR}/profile"
	ts-profile -o "${PERFDIR}" sleep 1 &
fi

# Start the streams.
eval "dbt3-throughput-stream-wrapper -f $scale_factor \
		-n $num_stream $EXTRA_ARGS -o $OUTPUT_DIR -s $SEED_FILE \
		$NO_REFRESH_FLAG $UNPRIVILEGED_ARG" || exit 1

dbt3-$TAG-time-statistics -e -n PERF.THRUPUT || exit 1

if [ $STATS -eq 1 ]; then
	stop_procs
fi

# Stop the database after the test.
if [ $PRIVILEGED -eq 1 ]; then
	dbt3-$DATABASE-stop-db
fi

if [ "${MPP}" -eq 0 ] && [ "${PROFILE}" -eq 1 ]; then
	echo "Generating profiling reports for throughput test..."
	ts-profile -o "${PERFDIR}" -p
fi
