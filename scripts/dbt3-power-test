#!/bin/bash
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2003-2006 Open Source Development Labs, Inc.
#               2003-2006 Jenny Zhang
#               2015      2ndQuadrant, Ltd.
#               2004-2022 Mark Wong

EXTRA=0
EXTRA_ARGS=
USE_OPROFILE=0
USE_LINUXPERF=0
NO_REFRESH=0
MPP=0
PRIVILEGED=1

usage()
{
	echo
	echo "`basename $0` is the DBT-3 power tester"
	echo ""
	echo "Usage:"
	echo "  `basename $0` [OPTIONS]"
	echo
	echo "Generate options:"
	echo "  -a DBMS         database management system to test"
	echo "  -d              direct data load"
	echo "  -f SCALE        database scale factor, default 1"
	echo "  -g              generate flat files"
	echo "  -h              this help message"
	echo "  -l              only load data"
	echo "  -o DIRECTORY    path to store test results"
	echo "  -s SEED         seed to use for power and throughput tests"
	echo "  -U              run as an unprivileged user"
	echo "  -y              enable oprofile (Linux only)"
	echo "  -Y              enable linux perf (Linux only)"
	echo "  -z              do not run refresh streams"
	echo ""
	echo "DBMS options are:"
	echo "  monetdb         MonetDB"
	echo "  mysql           MySQL"
	echo "  pgsql           PostgreSQL"
	echo "  pgxl            Postgres-XL"
	echo "  virtuoso        Virtuoso"
	echo ""
	echo "PostgreSQL specific options:"
	echo "  -e              EXPLAIN ANALYZE"
	echo "  -p              database parameters for the load test"
}

# process the command line parameters
while getopts "a:ef:o:p:s:UyYz" opt; do
	case $opt in
	a)
		DATABASE=$OPTARG
		if [ "x$DATABASE" = "xpgxl" ]; then
			MPP=1
		fi
		;;
	e)
		EXTRA=1
		EXTRA_ARGS="-e"
		QGEN_ARG="-i ${DSS_QUERY}/explain-analyze.sql"
		;;
	f)
		SCALE_FACTOR=$OPTARG
		;;
	o)
		OUTPUT_DIR=$OPTARG
		RESULTSDIR="${OUTPUT_DIR}/results"
		mkdir -p ${RESULTSDIR}
		;;
	p)
		PARAMETERS_ARG="-p \"$OPTARG\""
		;;
	s)
		SEED_FILE=$OPTARG
		;;
	U)
		PRIVILEGED=0
		UNPRIVILEGED_ARG="-U"
		;;
	y)
		USE_OPROFILE=1
		;;
	Y)
		USE_LINUXPERF=1
		;;
	z)
		NO_REFRESH=1
		;;
	\?)
		usage
		exit 1
		;;
	esac
done

if [ "x$QGEN" = "x" ]; then
	echo "set QGEN environment variable to aboslute path to qgen binary"
	exit 1
fi

if [ "x$DATABASE" = "x" ]; then
	echo "Specify database management system with -a flag"
	usage
	exit 1
fi

if [ $DATABASE = "monetdb" ]; then
	DBCMD="mclient -e -d $DBNAME"
elif [ $DATABASE = "pgsql" ] || [ $DATABASE = "pgxl" ]; then
	DBCMD="psql -v ON_ERROR_STOP=1 -X -e"
elif [ $DATABASE = "mysql" ]; then
	DBCMD="mysql -u root -D $DBNAME"
elif [ $DATABASE = "virtuoso" ]; then
	DBCMD="isql PROMPT=OFF ERRORS=STDOUT ECHO=ON VERBOSE=OFF"
else
	echo "Unsupported database system"
	exit 1
fi

if [ "x$DATABASE" = "xpgxl" ]; then
	TAG="pgsql"
	. $HOME/pgxc_ctl/pgxc_ctl.conf
	for HOSTNAME in ${datanodeMasterServers[*]}; do
		ssh $HOSTNAME "mkdir -p $RESULTSDIR"
	done
else
	TAG=$DATABASE
fi

which gzip > /dev/null 2>&1
if [ $? -eq 0 ]; then
	GZIP=gzip
else
	GZIP=true
fi

# Generate queries for the Power test.
if [ -f "$SEED_FILE" ]; then
	read SEED < $SEED_FILE
else
	SEED=`date +%-m%d%H%M%S`
fi
echo "Seed : $SEED" > $OUTPUT_DIR/readme.txt

# Get the EXPLAIN plans for only the SELECT statements.
if [ $DATABASE = "virtuoso" ]; then
	# Special case for Virtuoso since qgen cannot do this for us.
	ESTART="explain('"
	EEND="');"
fi
PLANDIR=$OUTPUT_DIR/plans
mkdir -p $PLANDIR || exit 1
i=1
while [ $i -le 22 ]; do
	# Remember the query planned is in the order determined by the seed.
	Q=`$QGEN -c -r $SEED -p 0 -s $SCALE_FACTOR -x $i`
	N=`echo $Q | sed -n -r 's/.*\(#\)([[:digit:]]+)\..*/\1/p'`
	if [ $DATABASE = "virtuoso" ]; then
		# Can't have comments or transaction statments sent to explain().
		# Escape single quotes for explain().
		Q=`$QGEN -a -r $SEED -p 0 -s $SCALE_FACTOR -x $i | tail -n +2 | sed -e "s/'/''/g"`
	fi
	$DBCMD << __EOF__ > $PLANDIR/$N.txt
$ESTART
$Q
$EEND
__EOF__
	i=$(( $i + 1 ))
done

if [ $PRIVILEGED -eq 1 ]; then
	dbt3-$DATABASE-stop-db
	eval dbt3-$DATABASE-start-db -o $OUTPUT_DIR $PARAMETERS_ARG || exit 1
fi

# Start collecting system statistics.
dbt3-sysstats --outdir $OUTPUT_DIR --sample 60 --mpp $MPP || exit 1

# Collect database statistics
dbt3-$DATABASE-dbstat ${OUTPUT_DIR} &

# Clear the read profile counters.
if [ -f /proc/profile ]; then
	clearprof
fi

# Clear the oprofile counters.
if [ $USE_OPROFILE -eq 1 ]; then
	clearoprof
fi

s_time_power=`date +%s`
dbt3-$TAG-time-statistics -s -n PERF.POWER || exit 1

# Refresh Stream 1
TASK="PERF.POWER.RF1"
dbt3-$TAG-time-statistics -s -n $TASK || exit 1
if [ $NO_REFRESH -eq 0 ]; then
	echo "`date`: Power Test : Starting Refresh Stream 1"
	s_time=`date +%s`
	eval "dbt3-${TAG}-rf1" "$UNPRIVILEGED_ARG" "$EXTRA_ARGS" \
			-f "$SCALE_FACTOR" > "${RESULTSDIR}/rf1.txt" 2>&1
	DATASET=$?
	if [ $DATASET -lt 1 ]; then
		exit 1
	fi
	e_time=`date +%s`
	echo "`date`: Power Test : Refresh Stream 1 completed."
	diff_time=$(( $e_time - $s_time ))
fi
dbt3-$TAG-time-statistics -e -n $TASK || exit 1

# Execute the queries.
i=1
while [ ${i} -le 22 ]; do
	Q=`$QGEN -c -r $SEED -p 0 -s $SCALE_FACTOR $QGEN_ARG $i`
	N=`echo ${Q} | sed -n -r 's/.*\(#\)([[:digit:]]+)\..*/\1/p'`
	if [ $USE_LINUXPERF -eq 1 ]; then
		PERFDIR=$OUTPUT_DIR/perf/$N
		if [ $MPP -eq 0 ]; then
			mkdir -p $PERFDIR
			PERFCOMMAND="perf record -a -g -s -F 100 -o $PERFDIR/q$N-perf.data"
		else
			for HOSTNAME in ${coordMasterServers[*]} ${datanodeMasterServers[*]}; do
				ssh $HOSTNAME << __EOF__ &
mkdir -p $PERFDIR
perf record -a -g -s -F 100 -o $PERFDIR/perf-$HOSTNAME-q$N.data
__EOF__
			done
			fi
	fi
	TASK="PERF.POWER.Q${N}"
	dbt3-$TAG-time-statistics -s -n $TASK || exit 1
	if [ $MPP -eq 0 ]; then
		eval $PERFCOMMAND $DBCMD << __EOF__ \
				>> $RESULTSDIR/$N.txt 2>&1
${Q}
__EOF__
	else
		$DBCMD << __EOF__ > $RESULTSDIR/$N.txt 2>&1
${Q}
__EOF__
	fi

	dbt3-$TAG-time-statistics -e -n $TASK || exit 1
	if [ $MPP -eq 1 ] && [ $USE_LINUXPERF -eq 1 ]; then
		# Brute force.
		for HOSTNAME in ${coordMasterServers[*]} ${datanodeMasterServers[*]}; do
			ssh $HOSTNAME "killall -9 perf"
		done
	fi

	i=$(( ${i} + 1 ))
done

TASK="PERF.POWER.RF2"
dbt3-$TAG-time-statistics -s -n $TASK || exit 1
if [ $NO_REFRESH -eq 0 ]; then
	# Refresh Stream 2
	echo "`date`: Power Test : Starting Refresh Stream 2"
	s_time=`date +%s`
	eval "dbt3-${TAG}-rf2" "$UNPRIVILEGED_ARG" "$EXTRA_ARGS" -s "$DATASET" > \
			"${RESULTSDIR}/rf2.txt" 2>&1 || exit 1
	e_time=`date +%s`
	echo "`date`: Power Test : Refresh Stream 2 completed."
	diff_time=$(( $e_time - $s_time ))
fi
dbt3-$TAG-time-statistics -e -n $TASK || exit 1

dbt3-$TAG-time-statistics -e -n PERF.POWER || exit 1
e_time_power=`date +%s`
echo "`date`: Power Test completed."
diff_time=$(( $e_time_power - $s_time_power ))
echo "Elapsed time for Power Test : $diff_time seconds"

# Stop collecting system statistics.
read SARPIDS < $OUTPUT_DIR/sar.pid
for SARPID in $SARPIDS; do
	kill $SARPID
done
read PIDSTATPIDS < $OUTPUT_DIR/pidstat.pid
for PIDSTATPID in $PIDSTATPIDS; do
	kill $PIDSTATPID
done
if [ -f "$OUTPUT_DIR/dbstat.pid" ]; then
	read DBSTATPID < $OUTPUT_DIR/dbstat.pid
	kill $DBSTATPID
fi

# Brute force.
if [ $MPP -eq 1 ]; then
	for HOSTNAME in ${coordMasterServers[*]} ${datanodeMasterServers[*]}; do
		ssh $HOSTNAME "killall -9 sar sadc pidstat"
	done
fi

if [ $PRIVILEGED -eq 1 ]; then
	dbt3-$DATABASE-stop-db || exit 1
fi

if [ -f /proc/profile ]; then
	profname="Power_Test"
	getprof
fi

if [ $USE_OPROFILE -eq 1 ]; then
	profname="Power_Test"
	getoprof
fi

if [ $USE_LINUXPERF -eq 1 ]; then
	echo "Generating Linux perf reports for power test..."
	if [ $MPP -eq 0 ]; then
		i=1
		while [ $i -le 22 ]; do
			PERFDIR=$OUTPUT_DIR/perf/$i
			PERFPREFIX=q$i
			perf report -i $PERFDIR/$PERFPREFIX-perf.data -n \
					> $PERFDIR/$PERFPREFIX-perf-report.txt
			$GZIP $PERFDIR/$PERFPREFIX-perf-report.txt
			perf annotate -l -P -i $PERFDIR/$PERFPREFIX-perf.data \
					> $PERFDIR/$PERFPREFIX-perf-annotate.txt
			$GZIP $PERFDIR/$PERFPREFIX-perf-annotate.txt
			perf script -L -i $PERFDIR/$PERFPREFIX-perf.data \
					> $PERFDIR/$PERFPREFIX-perf-trace.txt
			$GZIP $PERFDIR/$PERFPREFIX-perf-trace.txt
			$GZIP $PERFDIR/$PERFPREFIX-perf.data
			i=$(( $i + 1 ))
		done > $OUTPUT_DIR/perf/report-output.txt 2>&1
	else
		for HOSTNAME in ${coordMasterServers[*]} ${datanodeMasterServers[*]}; do
			i=1
			while [ $i -le 22 ]; do
				PERFDIR=$OUTPUT_DIR/perf/$i
				PERFPREFIX=q$i
				ssh $HOSTNAME << __EOF__ &
perf report -i $PERFDIR/perf-$HOSTNAME-$PERFPREFIX.data -n \
		> $PERFDIR/perf-report-$HOSTNAME-$PERFPREFIX.txt
$GZIP $PERFDIR/perf-report-$HOSTNAME-$PERFPREFIX.txt
perf annotate -l -P -i $PERFDIR/perf-$HOSTNAME-$PERFPREFIX.data \
		> $PERFDIR/perf-annotate-$HOSTNAME-$PERFPREFIX.txt
$GZIP $PERFDIR/perf-annotate-$HOSTNAME-$PERFPREFIX.txt
perf script -L -i $PERFDIR/perf-$HOSTNAME-$PERFPREFIX.data \
		> $PERFDIR/perf-trace-$HOSTNAME-$PERFPREFIX.txt
$GZIP $PERFDIR/perf-trace-$HOSTNAME-$PERFPREFIX.txt
$GZIP $PERFDIR/perf-$HOSTNAME-$PERFPREFIX.data
__EOF__
				i=$(( $i + 1 ))
			done > $OUTPUT_DIR/perf/report-output.txt 2>&1
		done
	wait
	fi
fi
