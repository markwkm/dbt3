#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-3 Authors

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 3 (DBT-3) report generator

Usage:
  $(basename "${0}") [OPTION]

Options:
  --fast         do not generate charts
  -i DIRECTORY   DBT-3 results directory
  -V, --version  output version information, then exit
  -?, --help     show this help, then exit

@HOMEPAGE@
EOF
}

create_stat_page()
{
	local TITLE=$1
	local TAG=$2
	local DIR=$3
	local ODIR=$4

	mkdir -p $ODIR

	cat > ${ODIR}/index.rst << __EOF__
================================================================================
Database Test 3 $TITLE $TAG Charts
================================================================================

$(show_images $DIR $TAG)
__EOF__
}

display_sar_stats() {
	STATSDIR=$1

	if [ ! -f "${INDIR}/${STATSDIR}/sysstat/sar.datafile" ]; then
		return
	fi

	cat << __EOF__
\`CPU <${STATSDIR}/cpu/>\`__ \`Memory <${STATSDIR}/mem/>\`__ \`Blockdev <${STATSDIR}/blockdev/>\`__ \`Network <${STATSDIR}/net/>\`__ \`Paging <${STATSDIR}/paging/>\`__ \`Swap <${STATSDIR}/swap/>\`__
__EOF__

	THISDIR="${INDIR}/${STATSDIR}"
	create_stat_page $STATSDIR cpu $THISDIR ${THISDIR}/cpu
	create_stat_page $STATSDIR mem $THISDIR ${THISDIR}/mem
	create_stat_page $STATSDIR blockdev $THISDIR ${THISDIR}/blockdev
	create_stat_page $STATSDIR net $THISDIR ${THISDIR}/net
	create_stat_page "${STATSDIR}" paging "${THISDIR}" "${THISDIR}/paging"
	create_stat_page $STATSDIR swap $THISDIR ${THISDIR}/swap
}

show_images()
{
	DIR=$1
	TAG=$2

	CHARTS=$(find "${DIR}" -name "sar-${TAG}*.png" | sort -n)
	for CHART in $CHARTS; do
		FNAME=$(basename "${CHART}")
		echo ".. image:: ../sysstat/sar/${TAG}/${FNAME}"
		echo "   :target: ../sysstat/sar/${TAG}/${FNAME}"
		echo "   :width: 100%"
		echo ""
	done
}

error() {
	echo "ERROR: $@"
	exit 1
}

warning() {
	echo "WARNING: $@"
}

# Use this to skip chart generation to help test just the HTML generation.
FAST=0
# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(--fast)
		export FAST=1
		;;
	(-i)
		shift
		INDIR="${1}"
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 3) v@PROJECT_VERSION@"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ "x${INDIR}" = "x" ]; then
	echo "Specify dbt3 results directory with -i"
	exit 1
fi

echo "Generating sar charts..."
if [ $FAST -ne 1 ]; then
	for TEST in load power throughput; do
		find "${INDIR}/${TEST}" -type d -name sysstat 2> /dev/null| \
				while IFS= read -r SARDIR; do
			ts-plot-sar -i "${SARDIR}/sar" &
		done
	done
	wait
fi

echo "Processing pidstat files..."
if [ $FAST -ne 1 ]; then
	for TEST in load power throughput; do
		find "${INDIR}/${TEST}" -type f -name pidstat.txt 2> /dev/null | \
				while IFS= read -r PIDSTATFILE; do
			ts-process-pidstat -i "${PIDSTATFILE}" &
		done
	done
	wait

	for TEST in load power throughput; do
		find "${INDIR}/${TEST}" -type f -name pidstat.csv 2> /dev/null | \
				while IFS= read -r PIDSTATCSV; do
			PIDSTATDIR="$(dirname "${PIDSTATCSV}")"
			ts-plot-pidstat -i "${PIDSTATCSV}" -o "${PIDSTATDIR}/pidstat" &
		done
	done
	wait
fi

DATE=$(grep "^date" ${INDIR}/config.txt | cut -d ":" -f2-)
DBMS=$(grep "^dbms" ${INDIR}/config.txt | awk '{print $2}')
DBVER=$(grep "^dbver" ${INDIR}/config.txt | cut -d " " -f2-)
OSVER=$(grep "^kernel" ${INDIR}/config.txt | cut -d ' ' -f3-)
QTIMECSV="${INDIR}/q_time.csv"
SCALE_FACTOR=$(grep scale_factor "${INDIR}/config.txt" | awk '{print $2}')
SF=$(grep scale_factor ${INDIR}/config.txt | awk '{print $2}')
STREAMS=$(grep num_stream ${INDIR}/config.txt | awk '{print $2}')

dbt3-post-process \
		-i "${INDIR}" \
		-n "${STREAMS}" \
		-2 \
		-3 \
		-h > "${INDIR}/with-links-summary.rst"

LOADDIR=${INDIR}/load
if [ -d "${LOADDIR}" ]; then
	LOAD=$(grep LOAD $INDIR/q_time.csv | awk -F, '{ print $5 }')
	# Round to 2 decimal places, convert to hours.
	LOAD_HOUR=$(echo "scale=2; ${LOAD} / 3600" | bc -l)
	LOAD_MIN=$(echo "scale=2; ${LOAD} / 60" | bc -l)
else
	LOAD=0
fi

POWERDIR="power"
if [ -d "${INDIR}/${POWERDIR}" ]; then
	POWER=$(dbt3-power-score -i $QTIMECSV -s $SF)
else
	POWER="N/A"
fi

THROUGHPUTDIR="throughput"
if [ -d "${INDIR}/${THROUGHPUTDIR}" ]; then
	THROUGHPUT=$(dbt3-throughput-score -i $QTIMECSV -s $SF -n $STREAMS)
else
	THROUGHPUT="N/A"
fi

if [ ! "${POWER}" = "N/A" ] && [ ! "${THROUGHPUT}" = "N/A" ]; then
	COMPOSITE=$(echo "scale=2; sqrt(${POWER} * ${THROUGHPUT})" | bc -l)
else
	COMPOSITE="N/A"
fi

# Plot a query results
if [ $FAST -ne 1 ]; then
	dbt3-plot-results -i "${QTIMECSV}" -o "${INDIR}"
fi

REPORTFILE="${INDIR}/report.rst"
cat > $REPORTFILE << __EOF__
======================
Database Test 3 Report
======================

**These results are not comparable to TPC Benchmark(TM) H Results.**

Summary
=======

* Date: $DATE
* Database Size: $SF GB
* Database Manager: $DBVER
* Operating System: $OSVER
* Notes: $(cat ${INDIR}/comment.txt 2> /dev/null)

Metrics
=======

=======================  ===========  ==
        Composite Score  $(printf "%11.2f" "${COMPOSITE}")
 Load Test Time (hours)  $(printf "%11.2f" "${LOAD_HOUR}")  $(display_sar_stats load)
       Power Test Score  $(printf "%11.2f" "${POWER}")  $(display_sar_stats power)
  Throughput Test Score  $(printf "%11.2f" "${THROUGHPUT}")  $(display_sar_stats throughput)
=======================  ===========  ==

Query Times
===========

.. image:: q_time.png
   :target: q_time.png
   :width: 100%

$(cat ${INDIR}/with-links-summary.rst)

$(dbt3-${DBMS}-report -i $INDIR 2> /dev/null)
__EOF__

# Generate HTML and PDF files.

RST2HTML5=""
which rst2html5.py > /dev/null 2>&1
if [ $? -eq 0 ]; then
	RST2HTML5="rst2html5.py"
fi
which rst2html5 > /dev/null 2>&1
if [ $? -eq 0 ]; then
RST2HTML5="rst2html5"
fi

if [ ! "x${RST2HTML5}" = "x" ]; then
# pandoc can't properly convert multi-cell table headings from rst but
# Sphinx's rst2html can. Then pandoc can convert multi-cell table headings
# from html to pdf.

for RST in $(find $INDIR -name "*.rst"); do
		NAME="${RST%.*}"
		(cd $(dirname $RST) && \
				$RST2HTML5 $(basename $RST) ${NAME}.html 2> /dev/null)
	done

	echo "Generated top level HTML reports:"
	ls -1v ${INDIR}/*.html
	echo ""

	if [ "${GENERATE_PDF}" = "1" ]; then
		# A pdf could be produced other ways, but I believe pandoc produces the
		# most minimally styled LaTeX looking document, as opposed to using
		# rst2latex, with default settings.
		which pandoc > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			(cd $INDIR && \
					pandoc -s report.html -f html -t pdf -o report.pdf \
							2> /dev/null)
			for HTML in $(find $INDIR -name "*.html"); do
				NAME="${HTML%.*}"
				(cd $(dirname $HTML) && \
						pandoc -s $(basename $HTML) -f html -t pdf -o ${NAME}.pdf \
								2> /dev/null)
			done

			echo "Generated top level PDF reports:"
			ls -1v ${INDIR}/*.pdf
			echo ""
		else
			echo "pandoc required to generate pdf report"
			exit 1
		fi
	fi
else
	echo "rst2html5 required to generate html report"
	exit 1
fi
