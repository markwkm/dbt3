#!/bin/sh
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2002-2008 Open Source Development Labs, Inc.
#               2002-2014 Mark Wong
#               2014      2ndQuadrant, Ltd.

start_remote_pidstat()
{
	HOST=$1

	PIDSTATFILE="$OUTPUT_DIR/$HOST/pidstat.txt"
	ssh $HOST << __EOF__
mkdir -p $OUTPUT_DIR/$HOST
$PIDSTAT $SAMPLE_LENGTH > $PIDSTATFILE
__EOF__
}

start_remote_sar()
{
	HOST=$1

	SARDIR="$OUTPUT_DIR/$HOST"
	ssh $HOST << __EOF__
mkdir -p $SARDIR
$SAR -o $SARDIR/sar_raw.out $SAMPLE_LENGTH > $SARDIR/sar.txt
__EOF__
}

if [ $# -lt 1 ]; then
    echo "usage: $0 --outdir <output_dir> -sample <sample_length>"
    echo "	<output_dir> will be created if it doesn't exist"
    exit 1
fi

# Check if sar is in the user's path.  If not, set to true so the script
# doesn't complain.

which sar > /dev/null 2>&1
if [ $? -eq 0 ]; then
	SAR=sar
else
	SAR=true
fi

which pidstat > /dev/null 2>&1
if [ $? -eq 0 ]; then
    PIDSTAT="pidstat -h -l -d -r -s -u -w"
	$PIDSTAT 1 1 > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		PIDSTAT="pidstat -h -l -d -r -u -w"
		$PIDSTAT 1 1 > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			echo "WARNING: Cannot determine propper pidstat flags"
			PIDSTAT="true"
		fi
	fi
else
    PIDSTAT=true
fi

COUNTER=0
MPP=0

while :
do
	case $# in
	0)
		break
		;;
	esac

	option=$1
	shift

	orig_option=$option
	case $option in
	--*)
		;;
	-*)
		option=-$option
		;;
	esac

	case $option in
	--*=*)
		optarg=`echo $option | sed -e 's/^[^=]*=//'`
		arguments="$arguments $option"
		;;
	--db | --dbname | --outdir | --sample)
		optarg=$1
		shift
		arguments="$arguments $option=$optarg"
		;;
	esac

	case $option in
	--db)
		DBTYPE=$optarg
		;;
	--dbname)
		DBTYPE_NAME=$optarg
		;;
	--mpp)
		MPP=1
		;;
	--outdir)
		OUTPUT_DIR=$optarg
		;;
	--sample)
		SAMPLE_LENGTH=$optarg
		;;
	esac
done

if [ -z $OUTPUT_DIR ]; then
	echo "use --outdir"
	exit 1
fi

if [ -z $SAMPLE_LENGTH ]; then
	echo "use --sample"
	exit 1
fi

# create the output directory in case it doesn't exist
mkdir -p $OUTPUT_DIR

echo "starting system statistics data collection"

# collect all sar data in binary form
if [ $MPP -eq 0 ]; then
	$SAR -o $OUTPUT_DIR/sar_raw.out $SAMPLE_LENGTH > $OUTPUT_DIR/sar.txt &
	echo "$!" > $OUTPUT_DIR/sar.pid

	$PIDSTAT $SAMPLE_LENGTH > $OUTPUT_DIR/pidstat.txt &
	echo "$!" > ${OUTPUT_DIR}/pidstat.pid
else
	SARDIR="$OUTPUT_DIR/$GTMHOST"
	mkdir -p $SARDIR
	$SAR -o $SARDIR/sar_raw.out $SAMPLE_LENGTH > $SARDIR/sar.txt &
	SARPIDS="$!"

	for HOSTNAME in $HOSTNAMES; do
		start_remote_sar $HOSTNAME &
		SARPIDS="$SARPIDS $!"
	done
	echo $SARPIDS > $OUTPUT_DIR/sar.pid

	PIDSTATFILE="$OUTPUT_DIR/$GTMHOST/pidstat.txt"

	$PIDSTAT $SAMPLE_LENGTH > $PIDSTATFILE &
	PIDSTATPIDS="$!"
	for HOSTNAME in $HOSTNAMES; do
		start_remote_pidstat $HOSTNAME &
		PIDSTATPIDS="$PIDSTATPIDS $!"
	done
	echo $PIDSTATPIDS > $OUTPUT_DIR/pidstat.pid
fi
