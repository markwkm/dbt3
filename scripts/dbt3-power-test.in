#!/bin/bash
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-3 Authors

EXTRA_ARGS=
NO_REFRESH=0
MPP=0
PRIVILEGED=1
PROFILE=0
STATS=0

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 3 (DBT-3) power tester

Usage:
  $(basename "${0}") [OPTION]

Options:
  -a DBMS        database management system to test
  -c             resort tables after loading
  -C             number of chunks to load
  -d             direct data load
  -f SCALE       database scale factor, default 1
  -g             generate flat files
  -h             this help message
  -l             only load data
  -o DIRECTORY   path to store test results
  -R             materialized view mode
  -s SEED        seed to use for power and throughput tests"
  -S             enable system and database stats collection
  -U             run test as an unprivileged user
  -Y             enable profiling (Linux only)
  -V, --version  output version information, then exit
  -z             do not run refresh streams"
  -?, --help     show this help, then exit

DBMS options are:
  monetdb    MonetDB
  mysql      MySQL
  pgsql      PostgreSQL
  pgxl       Postgres-XL
  virtuoso   Virtuoso

PostgreSQL specific options:
  -e              EXPLAIN ANALYZE
  -p             database parameters for the power test

@HOMEPAGE@
EOF
}

stop_procs() {
	if which ts-sysstat > /dev/null 2>&1; then
		ts-sysstat -o "${OUTPUT_DIR}/sysstat" -s &
	fi
	if which "ts-${DATABASE}-stat" > /dev/null 2>&1; then
		eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat -s &"
	fi
}
trap 'stop_procs' INT TERM

# process the command line parameters
# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-a)
		shift
		DATABASE="${1}"
		if [ "x$DATABASE" = "xpgxl" ]; then
			MPP=1
		fi
		;;
	(-e)
		EXTRA_ARGS="-e"
		QGEN_ARG="-i \"${DSS_QUERY}/explain-analyze.sql\""
		;;
	(-f)
		shift
		SCALE_FACTOR="${1}"
		;;
	(-o)
		shift
		OUTPUT_DIR="${1}"
		RESULTSDIR="${OUTPUT_DIR}/results"
		mkdir -p ${RESULTSDIR}
		;;
	(-p)
		shift
		PARAMETERS_ARG="-p \"${1}\""
		;;
	(-s)
		shift
		SEED_FILE="${1}"
		;;
	(-S)
		STATS=1
		;;
	(-U)
		PRIVILEGED=0
		UNPRIVILEGED_ARG="-U"
		;;
	(-Y)
		PROFILE=1
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 3) v@PROJECT_VERSION@"
		;;
	(-z)
		NO_REFRESH=1
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ "x$QGEN" = "x" ]; then
	echo "set QGEN environment variable to aboslute path to qgen binary"
	exit 1
fi

if [ "x$DATABASE" = "x" ]; then
	echo "Specify database management system with -a flag"
	usage
	exit 1
fi

if [ $DATABASE = "monetdb" ]; then
	DBCMD="mclient -e -d $DBNAME"
elif [ $DATABASE = "pgsql" ] || [ $DATABASE = "pgxl" ]; then
	DBCMD="psql -v ON_ERROR_STOP=1 -X -e"
elif [ $DATABASE = "mysql" ]; then
	DBCMD="mysql -u root -D $DBNAME"
elif [ $DATABASE = "virtuoso" ]; then
	DBCMD="isql PROMPT=OFF ERRORS=STDOUT ECHO=ON VERBOSE=OFF"
else
	echo "Unsupported database system"
	exit 1
fi

if [ "x$DATABASE" = "xpgxl" ]; then
	TAG="pgsql"
	. $HOME/pgxc_ctl/pgxc_ctl.conf
	for HOSTNAME in ${datanodeMasterServers[*]}; do
		ssh $HOSTNAME "mkdir -p $RESULTSDIR"
	done
else
	TAG=$DATABASE
fi

which gzip > /dev/null 2>&1
if [ $? -eq 0 ]; then
	GZIP=gzip
else
	GZIP=true
fi

# Generate queries for the Power test.
if [ -f "$SEED_FILE" ]; then
	read SEED < $SEED_FILE
else
	SEED=`date +%-m%d%H%M%S`
fi
echo "Seed : $SEED" > $OUTPUT_DIR/readme.txt

# Get the EXPLAIN plans for only the SELECT statements.
if [ $DATABASE = "virtuoso" ]; then
	# Special case for Virtuoso since qgen cannot do this for us.
	ESTART="explain('"
	EEND="');"
fi
PLANDIR=$OUTPUT_DIR/plans
mkdir -p $PLANDIR || exit 1
i=1
while [ $i -le 22 ]; do
	# Remember the query planned is in the order determined by the seed.
	Q=$(eval "\"${QGEN}\" -c -r ${SEED} -p 0 -s ${SCALE_FACTOR} -x ${i}")
	N=`echo $Q | sed -n -r 's/.*\(#\)([[:digit:]]+)\..*/\1/p'`
	if [ $DATABASE = "virtuoso" ]; then
		# Can't have comments or transaction statments sent to explain().
		# Escape single quotes for explain().
		Q=$(eval "\"${QGEN}\" -a -r ${SEED} -p 0 -s ${SCALE_FACTOR} -x ${i} \
				| tail -n +2 | sed -e \"s/'/''/g\"")
	fi
	$DBCMD << __EOF__ > $PLANDIR/$N.txt
$ESTART
$Q
$EEND
__EOF__
	i=$(( $i + 1 ))
done

if [ $PRIVILEGED -eq 1 ]; then
	dbt3-$DATABASE-stop-db
	eval dbt3-$DATABASE-start-db -o $OUTPUT_DIR $PARAMETERS_ARG || exit 1
fi

if [ $STATS -eq 1 ]; then
	# Start collecting system statistics.
	if ! which ts-sysstat > /dev/null 2>&1; then
		echo "WARNING: ts-sysstat not found for system stats collection"
	else
		ts-sysstat -o "${OUTPUT_DIR}/sysstat" &
	fi

	# Collect database statistics
	if ! which "ts-${DATABASE}-stat" > /dev/null 2>&1; then
		printf "WARNING: %s not found for database stats " \
				"ts-${DATABASE}-stat"
		echo "collection"
	else
		eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat &"
	fi
fi

s_time_power=`date +%s`
dbt3-$TAG-time-statistics -s -n PERF.POWER || exit 1

# Refresh Stream 1
TASK="PERF.POWER.RF1"
dbt3-$TAG-time-statistics -s -n $TASK || exit 1
if [ $NO_REFRESH -eq 0 ]; then
	echo "`date`: Power Test : Starting Refresh Stream 1"
	s_time=`date +%s`
	eval "dbt3-${TAG}-rf1" "$UNPRIVILEGED_ARG" "$EXTRA_ARGS" \
			-f "$SCALE_FACTOR" > "${RESULTSDIR}/rf1.txt" 2>&1
	DATASET=$?
	if [ $DATASET -lt 1 ]; then
		exit 1
	fi
	e_time=`date +%s`
	echo "`date`: Power Test : Refresh Stream 1 completed."
	diff_time=$(( $e_time - $s_time ))
fi
dbt3-$TAG-time-statistics -e -n $TASK || exit 1

# Execute the queries.
i=1
while [ ${i} -le 22 ]; do
	Q=$(eval "\"${QGEN}\" -c -r ${SEED} -p 0 -s ${SCALE_FACTOR} ${QGEN_ARG} ${i}")
	N=`echo ${Q} | sed -n -r 's/.*\(#\)([[:digit:]]+)\..*/\1/p'`
	if [ $PROFILE -eq 1 ]; then
		PERFDIR="${OUTPUT_DIR}/profile/${N}"
		if [ $MPP -eq 0 ]; then
			ts-profile -o "${PERFDIR}" sleep 1 &
		else
			for HOSTNAME in ${coordMasterServers[*]} ${datanodeMasterServers[*]}; do
				ssh $HOSTNAME << __EOF__ &
ts-profile -o "${PERFDIR}" sleep 1 &
__EOF__
			done
			fi
	fi
	TASK="PERF.POWER.Q${N}"
	dbt3-$TAG-time-statistics -s -n $TASK || exit 1
	if [ $MPP -eq 0 ]; then
		eval $PERFCOMMAND $DBCMD << __EOF__ \
				>> $RESULTSDIR/$N.txt 2>&1
${Q}
__EOF__
	else
		$DBCMD << __EOF__ > $RESULTSDIR/$N.txt 2>&1
${Q}
__EOF__
	fi

	dbt3-$TAG-time-statistics -e -n $TASK || exit 1

	i=$(( ${i} + 1 ))
done

TASK="PERF.POWER.RF2"
dbt3-$TAG-time-statistics -s -n $TASK || exit 1
if [ $NO_REFRESH -eq 0 ]; then
	# Refresh Stream 2
	echo "`date`: Power Test : Starting Refresh Stream 2"
	s_time=`date +%s`
	eval "dbt3-${TAG}-rf2" "$UNPRIVILEGED_ARG" "$EXTRA_ARGS" -s "$DATASET" > \
			"${RESULTSDIR}/rf2.txt" 2>&1 || exit 1
	e_time=`date +%s`
	echo "`date`: Power Test : Refresh Stream 2 completed."
	diff_time=$(( $e_time - $s_time ))
fi
dbt3-$TAG-time-statistics -e -n $TASK || exit 1

dbt3-$TAG-time-statistics -e -n PERF.POWER || exit 1
e_time_power=`date +%s`
echo "`date`: Power Test completed."
diff_time=$(( $e_time_power - $s_time_power ))
echo "Elapsed time for Power Test : $diff_time seconds"

if [ $STATS -eq 1 ]; then
	stop_procs
fi

# Brute force.
if [ $MPP -eq 1 ]; then
	for HOSTNAME in ${coordMasterServers[*]} ${datanodeMasterServers[*]}; do
		ssh $HOSTNAME "killall -9 sar sadc pidstat"
	done
fi

if [ $PRIVILEGED -eq 1 ]; then
	dbt3-$DATABASE-stop-db || exit 1
fi

if [ $PROFILE -eq 1 ]; then
	echo "Generating profilig reports for power test..."
	if [ $MPP -eq 0 ]; then
		i=1
		while [ $i -le 22 ]; do
			PERFDIR="${OUTPUT_DIR}/profile/${i}"
			ts-profile -o "${PERFDIR}" -p
			i=$(( $i + 1 ))
		done > "${OUTPUT_DIR}/profile/report-output.txt" 2>&1
	else
		for HOSTNAME in ${coordMasterServers[*]} ${datanodeMasterServers[*]}; do
			i=1
			while [ $i -le 22 ]; do
				PERFDIR="${OUTPUT_DIR}/profile/${i}"
				PERFPREFIX=q$i
				ssh $HOSTNAME << __EOF__ &
ts-profile -o "${PERFDIR}" -p
__EOF__
				i=$(( $i + 1 ))
			done > "${OUTPUT_DIR}/profile/report-output.txt" 2>&1
		done
	wait
	fi
fi
