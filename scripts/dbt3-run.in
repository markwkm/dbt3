#!/bin/bash
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-3 Authors

usage()
{
	cat << EOF
$(basename "${0}") is the DBT-3 workload runner

Usage:
  $(basename "${0}") [OPTIONS] DBMS DIRECTORY

Generate options:
  --comments=COMMENTS
                  provide COMMENTS to save with the test
  --db-name       databse name, default $DBNAME
  --dss=DIRECTORY
                  DIRECTORY for temporary DSS files, default $DSS_PATH
  --dss-query=DIRECTORY
                  DIRECTORY to query templates, default is to use
                  TPCHTOOLS/dbgen/queries/DBMS
  -f SCALE_FACTOR, --scale-factor=SCALE_FACTOR
                  database scale factor, default 1
  --file-load     load database from flat files, default is to load database
                  directly
  -g              generate flat files
  --load          run load test, default run load, power and throughput,
                  selecting individual tests disables the other tests unless
                  explicitly specified again
  -n STREAMS      number of throughput STREAMS
  --no-refresh    do not run refresh streams
  --power         run power test, default run load, power and throughput,
                  selecting individual tests disables the other tests unless
                  explicitly specified again
  --privileged    run test as a privileged user
  --profile       enable software profiling (Linux only)
  -R              materialized view mode
  --resort        sort data load files, only applies when generating flat files
  -s SEED         seed to use for power and throughput tests
  --stats         enable system and database stats collection
  --throughput    run throughput test, default run load, power and throughput,
                  selecting individual tests disables the other tests unless
                  explicitly specified again
  --tpchtools=TPCHTOOLS
                  TPCHTOOLS is the TPC-H Tools directory
  -u              use tablespaces
  -?, --help      this help message

DBMS options are:
  monetdb         MonetDB
  mysql           MySQL
  pgsql           PostgreSQL
  pgxl            Postgres-XL
  virtuoso        Virtuoso

PostgreSQL specific options:
  --explain       capture EXPLAIN ANALYZE output as part of the query results
  --load-params=OPTIONS
                  database parameters for the load test
  --power-params=OPTIONS
                  database parameters for the power test
  --throughput-params=OPTIONS
                  database parameters for the throughput test

DIRECTORY is the path to save test results.

@HOMEPAGE@
EOF
}

DATABASE=""
DBNAME="dbt3"
DIRECT_LOAD_ARG="-d"
DSS_PATH="/tmp/dss"
COMMENT=""
GENERATE=0
MPP=0
PRIVILEGED=0
RUN_ALL_TESTS=1
RUN_LOAD_TEST=0
RUN_POWER_TEST=0
RUN_THROUGHPUT_TEST=0
NODES=${#datanodeMasterServers[@]}
OUTPUT_DIR=""
PROFILE_ARG=""
RESORT_ARG=""
SCALE_FACTOR=1
SEED=0
STATS_ARG=""
STREAMS=""
EXTRA_ARGS=""
UNPRIVILEGED_ARG="-U"
WORKLOAD="H"

if [ -n "$DEFAULT_LOAD_PARAMETERS" ]; then
	LOAD_PARAMETERS="$DEFAULT_LOAD_PARAMETERS"
fi
if [ -n "$DEFAULT_POWER_PARAMETERS" ]; then
	POWER_PARAMETERS="$DEFAULT_POWER_PARAMETERS"
fi
if [ -n "$DEFAULT_THROUGHPUT_PARAMETERS" ]; then
	THROUGHPUT_PARAMETERS="$DEFAULT_THROUGHPUT_PARAMETERS"
fi

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(--comment)
		shift
		COMMENT=${1}
		;;
	(--comment=?*)
		COMMENT=${1#*--comment=}
		;;
	(-D)
		shift
		CHUNK_ARG="-C $1"
		;;
	(--db-name)
		shift
		DBNAME="${1}"
		;;
	(--db-name=?*)
		DBNAME="${1#*--db-name=}"
		;;
	(--dss)
		shift
		DSS_PATH="${1}"
		;;
	(--dss=?*)
		DSS_PATH="${1#*--dss=}"
		;;
	(--dss-query)
		shift
		DSS_QUERY="${1}"
		;;
	(--dss-query=?*)
		DSS_QUERY="${1#*--dss-query=}"
		;;
	(--explain)
		EXTRA_ARGS="$EXTRA_ARGS -e"
		;;
	(-f | --scale-factor)
		shift
		SCALE_FACTOR="${1}"
		;;
	(-f?*)
		SCALE_FACTOR="${1#*-f}"
		;;
	(--scale-factor=?*)
		SCALE_FACTOR="${1#*--scale-factor=}"
		;;
	(--file-load)
		DIRECT_LOAD_ARG=""
		;;
	(-g)
		GENERATE=1
		;;
	(--load)
		RUN_LOAD_TEST=1
		RUN_ALL_TESTS=0
		;;
	(--load-params)
		shift
		LOAD_PARAMETERS="$LOAD_PARAMETERS ${1}"
		;;
	(--load-params=?*)
		LOAD_PARAMETERS="$LOAD_PARAMETERS ${1#*--load-params=}"
		;;
	(-n | --streams)
		shift
		STREAMS=$1
		;;
	(-n?*)
		STREAMS="${1#*-n}"
		;;
	(--streams=?*)
		STREAMS="${1#*--streams=}"
		;;
	(--no-refresh)
		NO_REFRESH_FLAG="-z"
		;;
	(--power)
		RUN_POWER_TEST=1
		RUN_ALL_TESTS=0
		;;
	(--power-params)
		shift
		POWER_PARAMETERS="$POWER_PARAMETERS ${1}"
		;;
	(--power-params=?*)
		POWER_PARAMETERS="$POWER_PARAMETERS ${1#*--power-params=}"
		;;
	(--profile)
		PROFILE_ARG="-Y"
		;;
	(-R)
		WORKLOAD_ARG="-R"
		;;
	(--resort)
		RESORT_ARG="-c"
		;;
	(-s)
		shift
		SEED=$1
		;;
	(--stats)
		STATS_ARG="-S"
		;;
	(--throughput)
		RUN_THROUGHPUT_TEST=1
		RUN_ALL_TESTS=0
		;;
	(--throughput-params)
		shift
		THROUGHPUT_PARAMETERS="$THROUGHPUT_PARAMETERS ${1}"
		;;
	(--throughput-params=?*)
		shift
		THROUGHPUT_PARAMETERS="$THROUGHPUT_PARAMETERS ${1#*--throughput-params=}"
		;;
	(--tpchtools)
		shift
		TPCHTOOLS="${1}"
		;;
	(--tpchtools=?*)
		TPCHTOOLS="${1#*--tpchtools=}"
		;;
	(-u)
		TABLESPACES_FLAG="-t"
		;;
	(--privileged)
		PRIVILEGED=1
		UNPRIVILEGED_ARG=""
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 3) v@PROJECT_VERSION@"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ $# -eq 0 ]; then
	printf "Specify which DBMS system to test, try \"%s\" " \
			"$(basename "${0}")"
	echo "for more information."
	exit 1
fi

export DATABASE="${1}"
shift

if [ $# -eq 0 ]; then
	echo "Specify the location to save test results, where directory does "
	printf "not exist yet, try \"%s\" " "$(basename "${0}")"
	echo "for more information."
	exit 1
fi

OUTPUT_DIR="${1}"

export SCALE_FACTOR="${SCALE_FACTOR}"

mkdir -p "${DSS_PATH}"
if [ ! -d "${DSS_PATH}" ]; then
	>&2 echo "ERROR: DSS_PATH path does not exist at ${DSS_PATH}"
	exit 1
fi
export DSS_PATH

if [ ! -d "${TPCHTOOLS}" ]; then
	>&2 echo "ERROR: TPCHTOOLS path does not exist at ${TPCHTOOLS}"
	exit 1
fi
export DSS_CONFIG="${TPCHTOOLS}/dbgen"

export DBGEN="${DSS_CONFIG}/dbgen"
if [ ! -f "${DBGEN}" ]; then
	>&2 echo "ERROR: ${DBGEN} does not exist, was the TPC-C Tools built with 'dbt3-build-dbgen ${TPCHTOOLS}'"
	exit 1
fi

export QGEN="${DSS_CONFIG}/qgen"
if [ ! -f "${QGEN}" ]; then
	>&2 echo "ERROR: ${QGEN} does not exist, was the TPC-C Tools built with 'dbt3-build-dbgen ${TPCHTOOLS}'"
	exit 1
fi

if [ "${DSS_QUERY}" = "" ]; then
	DSS_QUERY="${TPCHTOOLS}/dbgen/queries/${DATABASE}"
fi
if [ ! -d "${DSS_QUERY}" ]; then
	>&2 echo "ERROR: DSS_QUERY path does not exist at ${DSS_QUERY}"
	exit 1
fi
export DSS_QUERY
echo "DSS_QUERY set to ${DSS_QUERY}"

if [ "x${OUTPUT_DIR}" = "x" ]; then
	>&2 echo "Error: use -o to set output directory"
	exit 1
fi
mkdir -p "${OUTPUT_DIR}"

if [ "${DATABASE}" = "pgsql" ]; then
	export PGDATABASE="${DBNAME}"
fi

if [ "x$DATABASE" = "xpgxl" ]; then
	TAG="pgsql"
	MPP=1
	MPP_ARG="-C $NODES"
	. $HOME/pgxc_ctl/pgxc_ctl.conf
	for HOSTNAME in ${datanodeMasterServers[*]}; do
		ssh $HOSTNAME "mkdir -p $OUTPUT_DIR"
	done
else
	TAG=$DATABASE
fi

if [ "${STREAMS}" = "" ]; then
	if [ "${SCALE_FACTOR}" -lt 10 ]; then
		STREAMS=2
	elif [ "${SCALE_FACTOR}" -lt 30 ]; then
		STREAMS=3
	elif [ "${SCALE_FACTOR}" -lt 100 ]; then
		STREAMS=4
	elif [ "${SCALE_FACTOR}" -lt 300 ]; then
		STREAMS=5
	elif [ "${SCALE_FACTOR}" -lt 1000 ]; then
		STREAMS=6
	elif [ "${SCALE_FACTOR}" -lt 3000 ]; then
		STREAMS=7
	elif [ "${SCALE_FACTOR}" -lt 10000 ]; then
		STREAMS=8
	elif [ "${SCALE_FACTOR}" -lt 30000 ]; then
		STREAMS=9
	elif [ "${SCALE_FACTOR}" -lt 100000 ]; then
		STREAMS=10
	else
		STREAMS=11
	fi
fi

if [ -n "$LOAD_PARAMETERS" ]; then
	LOAD_PARAMETERS_ARG="-p \"$LOAD_PARAMETERS\""
fi
if [ -n "$POWER_PARAMETERS" ]; then
	POWER_PARAMETERS_ARG="-p \"$POWER_PARAMETERS\""
fi
if [ -n "$THROUGHPUT_PARAMETERS" ]; then
	THROUGHPUT_PARAMETERS_ARG="-p \"$THROUGHPUT_PARAMETERS\""
fi

echo "SCALE: $SCALE_FACTOR"

# Reset the flags to make the logic later in the script easier.
if [ ${RUN_ALL_TESTS} -eq 1 ]; then
	RUN_LOAD_TEST=1
	RUN_POWER_TEST=1
	RUN_THROUGHPUT_TEST=1
fi

if [ "x${COMMENT}" != "x" ]; then
	echo ${COMMENT} > ${OUTPUT_DIR}/comment.txt
fi

# Load Test
if [ ${RUN_LOAD_TEST} -eq 1 ]; then
	eval dbt3-load-test \
			-a $DATABASE \
			-o $OUTPUT_DIR/load \
			${LOAD_PARAMETERS_ARG} \
			-f $SCALE_FACTOR \
			-g $GENERATE \
			${WORKLOAD_ARG} \
			$RESORT_ARG \
			$MPP_ARG \
			$DIRECT_LOAD_ARG \
			$CHUNK_ARG \
			$UNPRIVILEGED_ARG \
			$STATS_ARG \
			$PROFILE_ARG \
			${TABLESPACES_FLAG} || exit 1
else
	#
	# If the load test wasn't performed the time statistics needs to
	# be cleared out.  Otherwise the data collection will be
	# incomprehensible with duplicate data.
	#
	if [ $PRIVILEGED -eq 1 ]; then
		dbt3-${DATABASE}-start-db -o $OUTPUT_DIR
	fi
	dbt3-$TAG-time-statistics -c
fi

# Set the seed file.
SEED_FILE=$OUTPUT_DIR/seed
if [ $SEED -eq 0 ]; then
	# generate the initial seed according to cluse 2.1.3.3
	# the initial seed is the time stamp of the end of the database load time
	# expressed in the format mmddhhmms.
	date +%-m%d%H%M%S > $SEED_FILE
else
	echo $SEED > $SEED_FILE
fi
echo "Using seed: `cat $SEED_FILE`"

if [ ${RUN_POWER_TEST} -eq 1 ] || [ ${RUN_THROUGHPUT_TEST} -eq 1 ]; then
	# Start time of the Performance Test (Power and Throughput).
	s_time=`date +%s`
fi

if [ ${RUN_POWER_TEST} -eq 1 ]; then
	eval dbt3-power-test \
			-a $DATABASE \
			-f ${SCALE_FACTOR} \
			-o ${OUTPUT_DIR}/power \
			${POWER_PARAMETERS_ARG}\
			$EXTRA_ARGS \
			-s ${SEED_FILE} \
			$UNPRIVILEGED_ARG \
			$STATS_ARG \
			$PROFILE_ARG \
			${NO_REFRESH_FLAG}
	if [ $? -eq 1 ] ; then
		echo "power test problem!"
		exit 1
	fi
fi

if [ ${RUN_THROUGHPUT_TEST} -eq 1 ]; then
	eval dbt3-throughput-test \
			-n ${STREAMS} \
			-f ${SCALE_FACTOR} \
			-o ${OUTPUT_DIR}/throughput \
			${THROUGHPUT_PARAMETERS_ARG} \
			$EXTRA_ARGS \
			-s ${SEED_FILE} \
			$UNPRIVILEGED_ARG \
			$STATS_ARG \
			$PROFILE_ARG \
			${NO_REFRESH_FLAG}
	if [ $? -eq 1 ] ; then
		echo "throughput test problem!"
		exit 1
	fi
fi

if [ ${RUN_POWER_TEST} -eq 1 ] || [ ${RUN_THROUGHPUT_TEST} -eq 1 ]; then
	# End time of the Performance Test.
	e_time=`date +%s`
	diff_time=$(( $e_time - $s_time ))
	echo "Elapsed time for performance test: $diff_time seconds"
fi

# Make sure the database is started, which it might be depending on what parts
# of the workload are executed.
if [ $PRIVILEGED -eq 1 ]; then
	dbt3-${DATABASE}-start-db -o $OUTPUT_DIR
fi

# Get system details.
echo "Getting system configuration... "
dbt3-get-config $SCALE_FACTOR $STREAMS "$LOAD_PARAMETERS" "$POWER_PARAMETERS" \
"$THROUGHPUT_PARAMETERS" $OUTPUT_DIR || exit 1
echo "dbms: $DATABASE" >> $OUTPUT_DIR/config.txt
if [ $MPP -eq 1 ]; then
	echo "mpp: yes" >> $OUTPUT_DIR/config.txt
	echo "datanodes: $NODES" >> $OUTPUT_DIR/config.txt
	echo "hostnames: ${coordMasterServers[*]} ${datanodeMasterServers[*]}" >> $OUTPUT_DIR/config.txt
fi

echo "Getting query times... "
dbt3-$TAG-get-query-time > $OUTPUT_DIR/q_time.csv || exit 1

# Stop the database at the end of the test.
if [ $PRIVILEGED -eq 1 ]; then
	dbt3-${DATABASE}-stop-db
fi

# Calculate metrics.
echo "Post processing query results... "
for HOSTNAME in ${datanodeMasterServers[*]}; do
	rsync -av $HOSTNAME:$OUTPUT_DIR/ $OUTPUT_DIR/ &
done
wait

eval "dbt3-post-process -i $OUTPUT_DIR -n $STREAMS ${NO_REFRESH_FLAG}" \
		> "${OUTPUT_DIR}/summary.rst"

if [ ${RUN_LOAD_TEST} -eq 1 ]; then
	LOAD=$(grep LOAD ${OUTPUT_DIR}/q_time.csv | awk -F, '{ print $5 }')
	# Round to 2 decimal places, convert to hours.
	LOAD=$(echo "scale=2; ${LOAD} / 3600" | bc -l)
else
	LOAD="N/A"
fi

QTIMECSV="${OUTPUT_DIR}/q_time.csv"
if [ ${RUN_POWER_TEST} -eq 1 ]; then
	POWER="$(printf "%.2f" "$(dbt3-power-score -i "${QTIMECSV}" \
			-s "${SCALE_FACTOR}")")"
else
	POWER="N/A"
fi

if [ ${RUN_THROUGHPUT_TEST} -eq 1 ]; then
	THROUGHPUT="$(printf "%.2f" "$(dbt3-throughput-score -i "${QTIMECSV}" \
			-s "${SCALE_FACTOR}" -n "${STREAMS}")")"
else
	THROUGHPUT="N/A"
fi

if [ ${RUN_POWER_TEST} -eq 1 ] && [ ${RUN_THROUGHPUT_TEST} -eq 1 ]; then
	COMPOSITE=$(echo "scale=2; sqrt(${POWER} * ${THROUGHPUT})" | bc -l)
else
	COMPOSITE="N/A"
fi

echo ""
echo "Composite score: ${COMPOSITE}"
echo "Load time (hours): ${LOAD}"
echo "Power score: ${POWER}"
echo "Throughput Score: ${THROUGHPUT}"
echo ""

echo "Done!"
